// Generated by CoffeeScript 2.6.1
(function() {
  // Action        Set Size   Target                                    DefaultFieldCriterion  [field:criterion].... 
  // [list|count] [set-size] [names|references|authors|instances|tree] [default field string]  [field:criterion].... 

  var captureFields, captureTreeFields, isFieldName, parseAction, parseDefaultSearchTerm, parseOnePair, parseOneValue, parseSetSize, parseWherePairs, searchableFieldClick;

  window.captureSearch = function() {
    var fields, str;
    console.log('captureSearch');
    str = $('#query-string-field').val();
    console.log(str);
    fields = parseSearchString(str);
    return captureFields(fields);
  };

  window.parseSearchString = function(searchString, verbose = false) {
    var action, fields, limited, searchTokens, setSize, term, wherePairs;
    console.log(" ");
    console.log(`parseSearchString for: ${searchString}`);
    searchTokens = searchString.trim().replace(/:/g, ': ').replace(/:  /g, ': ').split(" ");
    [action, searchTokens] = parseAction(searchTokens);
    [setSize, limited, searchTokens] = parseSetSize(searchTokens);
    [term, searchTokens] = parseDefaultSearchTerm(searchTokens);
    [wherePairs, searchTokens] = parseWherePairs(searchTokens);
    fields = {
      action: action,
      limited: limited,
      setSize: setSize,
      conditions: "",
      format: "",
      term: term,
      wherePairs: wherePairs
    };
    console.log(`Action: ${fields.action}`);
    console.log(`Limited: ${fields.limited}`);
    console.log(`SetSize: ${fields.setSize}`);
    console.log(`term: ${fields.term}`);
    console.log(`wherePairs: ${fields.wherePairs}`);
    return fields;
  };

  parseAction = function(tokens) {
    var action, defaultAction;
    defaultAction = 'list';
    switch (tokens[0]) {
      case "count":
        action = "count";
        tokens = _.rest(tokens);
        break;
      case "list":
        action = "list";
        tokens = _.rest(tokens);
        break;
      default:
        action = defaultAction;
    }
    return [action, tokens];
  };

  parseSetSize = function(tokens) {
    var defaultSetSize, limited, setSize;
    console.log(`parseSetSize for tokens: ${tokens.join(',')}`);
    defaultSetSize = 100;
    if (!tokens[0]) {
      tokens = [defaultSetSize.toString()];
    }
    switch (false) {
      case !tokens[0].match(/[0-9]+/):
        limited = true;
        setSize = parseInt(tokens[0]);
        tokens = _.rest(tokens);
        break;
      case !tokens[0].match(/^all$/i):
        limited = false;
        setSize = defaultSetSize;
        tokens = _.rest(tokens);
        break;
      default:
        limited = true;
        setSize = defaultSetSize;
    }
    return [setSize, limited, tokens];
  };

  isFieldName = function(str) {
    return str.match(/:/);
  };

  parseDefaultSearchTerm = function(tokens) {
    var ndx, term, termTokens;
    console.log(`parseDefaultSearchTerm for tokens: ${tokens}`);
    ndx = _.findIndex(tokens, isFieldName);
    if (ndx >= 0) {
      termTokens = tokens.slice(0, ndx);
      term = termTokens.join(' ');
      tokens = tokens.slice(ndx); // no field
    } else {
      term = tokens.join(' ');
      tokens = [];
    }
    return [term, tokens];
  };

  parseWherePairs = function(tokens) {
    var pair, wherePairs;
    console.log(`parseWherePairs for: ${tokens.join(' ')}`);
    wherePairs = [];
    while (tokens.length > 0) {
      [pair, tokens] = parseOnePair(tokens);
      if (pair) {
        wherePairs.push(pair);
      }
    }
    return [wherePairs, tokens];
  };

  parseOnePair = function(tokens) {
    var field, pair, value;
    console.log(`parseOneWherePair for: ${tokens.join(' ')}`);
    switch (false) {
      case tokens.length !== 0:
        pair = null;
        tokens = [];
        break;
      case !isFieldName(tokens[0]):
        field = tokens[0];
        [value, tokens] = parseOneValue(tokens.slice(1));
        console.log(`Got back value: ${value}`);
        pair = {
          field: field,
          value: value
        };
        break;
      default:
        throw `Exception!!! Expected '${tokens[0]}' to be a field name`;
    }
    return [pair, tokens];
  };

  parseOneValue = function(tokens) {
    var value;
    console.log(`parseOneValue for: ${tokens.join(' ')}`);
    value = "";
    while (!(tokens.length === 0 || isFieldName(tokens[0]))) {
      console.log(`token zero: ${tokens[0]}`);
      value += ` ${tokens[0]}`;
      tokens = tokens.slice(1);
    }
    console.log(`Returning: value: ${value}`);
    return [value.trim(), tokens];
  };

  captureFields = function(fields) {
    var target;
    target = $('#query-target').val();
    console.log(`target: ${target}`);
    switch (false) {
      case !target.match(/^authors$/i):
        return window.captureAuthorFields(fields);
      case !target.match(/^names$/i):
        return window.captureNameFields(fields);
      case !target.match(/^references$/i):
        return window.captureReferenceFields(fields);
      case !target.match(/^instances$/i):
        return window.captureInstanceFields(fields);
      case !target.match(/^tree$/i):
        return '';
      default:
        throw `unknown target: ${target}`;
    }
  };

  captureTreeFields = function(fields) {
    return $('a#advanced-search-tab-link-tree').click();
  };

  searchableFieldClick = function(event, $element) {
    $('#query-string-field').val($('#query-string-field').val() + ' ' + $element.html().replace(/<[^>]*>/g, '').trim());
    return $('#query-string-field').focus();
  };

  //###
  $(document).on("turbolinks:load", function() {
    return $('body').on('click', 'a.searchable-field', function(event) {
      return searchableFieldClick(event, $(this));
    });
  });

}).call(this);
