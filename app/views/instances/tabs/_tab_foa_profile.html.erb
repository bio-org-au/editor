<% @product_configs_and_profile_items.each do |config_items| %>
  <% product_item_config, profile_item = config_items.values_at(:product_item_config, :profile_item) %>
  <div>
    <h4><%= product_item_config.display_html %></h4>
    <div id="message_<%= product_item_config.display_html.parameterize %>" class="message-container"></div> <!-- Message container -->
  </div>

  <div style="padding: 10px;margin: 5px 0 30px 0px;background-color: white;border: 1px solid #afafaf;">
    <!-- Profile Text Form -->
    <% profile_text = profile_item.profile_text || Profile::ProfileText.new %>
    <% url = profile_text.persisted? ? profile_text_path(id: profile_text.id) : profile_texts_path %>
    <% method = profile_text.persisted? ? :put : :post %>
    <div id="profile_text_form_<%= product_item_config.display_html.parameterize %>" style="overflow: hidden; margin-bottom: 10px;">
      <%= render partial: "profile_texts/form",
        locals: {
          profile_text: profile_text,
          url: url,
          method: method,
          product_item_config: product_item_config,
          instance_id: @instance.id,
          profile_item: profile_item
        }
      %>
    </div>
    <div
      id="profile_item_references_<%= product_item_config.display_html.parameterize %>"
      style="display: block" >
      <%= render partial: "profile_item_references/edit_form",
        collection: profile_item.profile_item_references,
        locals: {profile_item: profile_item},
        as: :profile_item_reference
      %>
    </div>

    <div id="add_reference_message_<%= product_item_config.display_html.parameterize %>" class="message-container"></div> <!-- Message container -->
    <div id="add_reference_<%= product_item_config.display_html.parameterize %>">
      <% if profile_item.persisted? %>
        <div style="padding: 30px 10px 40px 10px;border: 1px solid #ddd;margin-top:30px;">
          <label>Reference</label>
          <div id="add_reference_form_<%= product_item_config.display_html.parameterize %>" style="margin-bottom: 10px;">
            <%= render partial: 'profile_item_references/form',
              locals: {
                url: profile_item_references_path,
                method: :post,
                profile_item: profile_item,
                profile_item_reference: Profile::ProfileItemReference.new
            } %>
          </div>
        </div>
      <% end %>
    </div>

    <div style="padding: 30px 10px 10px 10px;">
      <div id="add_annotation_form<%= product_item_config.display_html.parameterize %>">
        <% if profile_item.persisted? %>
          <!-- Profile Item Reference Form -->
          <div id="annotation_message_<%= profile_item.id %>" class="message-container"></div>
          <label>Annotate this profile item:</label>
          <% profile_item_annotation = profile_item.profile_item_annotation || profile_item.build_profile_item_annotation %>
          <% url = profile_item_annotation.persisted? ? profile_item_annotation_path(profile_item_annotation) : profile_item_annotations_path %>
          <% method = profile_item_annotation.persisted? ? :put : :post %>
          <%= render partial: 'profile_item_annotations/form',
            locals: {
              url: url,
              method: method,
              profile_item_annotation: profile_item_annotation
            } %>
        <% end %>
      </div>
    </div>

    <% if profile_item.persisted? %>
      <% delete_link = link_to("Delete Profile Item",
        '#',
        id: "profile-item-delete-link-#{profile_item.id}",
        title: "Select to delete the profile item.  A confirmation dialog follows.",
        class: "btn btn-warning profile-item-delete-link pull-right xhidden",
        data: {
          profile_item_id: profile_item.id,
          confirm_btn_id: "confirm-or-cancel-delete-profile-item-#{profile_item.id}"})
      %>

      <% confirm_delete_link = link_to("Confirm delete",
                                      profile_item_path(profile_item.id),
                                      class: "btn btn-danger",
                                      title: "Select to confirm the delete.",
                                      remote: true,
                                      method: :delete)
      %>

      <% cancel_delete_link = link_to("Cancel delete",
                                      '#',
                                      id: "profile-item-cancel-delete-link-#{profile_item.id}",
                                      class: "btn btn-default profile-item-cancel-delete-link",
                                      title: "Select to cancel the delete.",
                                      data: {profile_item_id: profile_item.id})
      %>

      <% confirm_or_cancel_element = %Q(<div id="confirm-or-cancel-delete-profile-item-#{profile_item.id}"
                                        class="profile-item confirm-or-cancel-delete-link pull-right hidden"">
                                        #{confirm_delete_link}
                                        #{cancel_delete_link}</div>)
      %>
      <div style="padding-top: 30px;padding-bottom: 20px; overflow: hidden;">
        <%= delete_link.html_safe %>
        <%= confirm_or_cancel_element.html_safe %>
        <div id="message-for-profile-item-<%= profile_item.id %>" class="message-container"></div>
        <div id="error-for-profile-item-<%= profile_item.id %>" class="error-container message-container"></div>
      </div>
    <% end %>

  </div>
<% end %>

<!-- SimpleMDE CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<style>
    #simplemde-container .editor-preview h1,
    #simplemde-container .editor-preview-side h1 {
      display: block;
      font-size: 2em;
      margin-block-start: 0.67em;
      margin-block-end: 0.67em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview h2,
    #simplemde-container .editor-preview-side h2 {
      display: block;
      font-size: 1.5em;
      margin-block-start: 0.83em;
      margin-block-end: 0.83em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview h3,
    #simplemde-container .editor-preview-side h3 {
      display: block;
      font-size: 1.17em;
      margin-block-start: 1em;
      margin-block-end: 1em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview h4,
    #simplemde-container .editor-preview-side h4 {
      display: block;
      font-size: 1em;
      margin-block-start: 1.33em;
      margin-block-end: 1.33em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview h5,
    #simplemde-container .editor-preview-side h5 {
      display: block;
      font-size: 0.83em;
      margin-block-start: 1.67em;
      margin-block-end: 1.67em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview h6,
    #simplemde-container .editor-preview-side h6 {
      display: block;
      font-size: 0.67em;
      margin-block-start: 2.33em;
      margin-block-end: 2.33em;
      margin-inline-start: 0px;
      margin-inline-end: 0px;
      font-weight: bold;
      unicode-bidi: isolate;
    }

    #simplemde-container .editor-preview p,
    #simplemde-container .editor-preview-side p {
      font-size: 1em;
      line-height: 1.5;
      margin-bottom: 1em;
    }

    #simplemde-container .editor-preview blockquote,
    #simplemde-container .editor-preview-side blockquote {
      font-size: 1.2em;
      margin-left: 1.5em;
      color: #666;
      border-left: 4px solid #ccc;
      padding-left: 1em;
    }

    #simplemde-container .editor-preview ul,
    #simplemde-container .editor-preview ol,
    #simplemde-container .editor-preview-side ul,
    #simplemde-container .editor-preview-side ol {
      margin: 1em 0;
      padding-left: 2em;
    }

    #simplemde-container .editor-preview li,
    #simplemde-container .editor-preview-side li {
      margin-bottom: 0.5em;
    }

    #simplemde-container .editor-preview code,
    #simplemde-container .editor-preview-side code {
      font-family: "Courier New", Courier, monospace;
      background-color: #f8f8f8;
      padding: 2px 4px;
      border-radius: 4px;
    }

    /* Base styles for container */
    #simplemde-container {
      font-family: Arial, sans-serif;
      color: #333;
      line-height: 1.5;
    }

  .editor-textarea {
    display: none; /* Hide the textarea initially */
  }
  .custom-height {
    height: 100px; /* Default height corresponding to 4 rows */
  }
  .CodeMirror {
    min-height: 100px; /* Minimum height corresponding to 4 rows */
  }
  .message-container {
    margin-top: 5px;
  }
  .notice {
    color: green;
  }
  .debug {
    color: red;
  }
</style>

<!-- SimpleMDE JS -->
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it/dist/markdown-it.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it-sub/dist/markdown-it-sub.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it-sup/dist/markdown-it-sup.min.js"></script>

<script>
  function parameterize(string) {
    return string.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)+/g, '');
  }

  // Define the custom event
  var simpleMDELoadedEvent = new CustomEvent('simpleMDELoaded');

  // Dispatch the custom event when SimpleMDE is loaded
  function onSimpleMDELoad() {
    document.dispatchEvent(simpleMDELoadedEvent);
  }

  // Add the script load event listener
  var simpleMDEScript = document.querySelector('script[src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"]');
  simpleMDEScript.addEventListener('load', onSimpleMDELoad);

  function renderEditor(textarea) {
    debug('Initializing SimpleMDE for', textarea.id);
    textarea.style.display = 'block'; // Show the textarea

    // Check if SimpleMDE instance already exists and destroy it
    if (textarea.simplemdeInstance) {
      textarea.simplemdeInstance.toTextArea();
      textarea.simplemdeInstance = null;
    }

    // Initialize SimpleMDE
    var simplemde = new SimpleMDE({
      element: textarea,
      spellChecker: false,
      forceSync: true,
      toolbar: [
        "bold", "italic", "heading", "|",
        "quote", "code", "link", "image", "table", "|",
        {
          name: "subscript",
          action: function customSubscriptFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('~');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-subscript",
          title: "Insert Subscript",
        },
        {
          name: "superscript",
          action: function customSuperscriptFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('^');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-superscript",
          title: "Insert Superscript",
        },
        "|",
        {
          name: "male",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('♂');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-mars",
          title: "Insert Male Symbol",
        },
        {
          name: "female",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('♀');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-venus",
          title: "Insert Female Symbol",
        },
        {
          name: "plus-minus",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('±');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-plus-minus",
          title: "Insert Plus-Minus Symbol",
        },
        {
          name: "en-dash",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('–');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-minus",
          title: "Insert En Dash",
        },
        {
          name: "degree",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('°');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-circle",
          title: "Insert Degree Symbol",
        },
        {
          name: "multiplication",
          action: function customSpecialCharFunction(editor) {
            var cm = editor.codemirror;
            var cursorPos = cm.getCursor();
            cm.replaceSelection('×');
            cm.setCursor(cursorPos.line, cursorPos.ch + 1);
            cm.focus();
          },
          className: "fa fa-times",
          title: "Insert Multiplication Symbol",
        },
        "preview", "side-by-side", "fullscreen"
      ],
      status: ["lines", "words", "cursor"],
      previewRender: function(plainText) {
        var md = window.markdownit()
                    .use(window.markdownitSub)
                    .use(window.markdownitSup);
        return md.render(plainText);
      }
    });

    // Store the SimpleMDE instance on the textarea element
    textarea.simplemdeInstance = simplemde;

    // Adjust the CodeMirror instance
    var cm = simplemde.codemirror;

    // Function to adjust height based on content
    function adjustHeight() {
      if (simplemde.isSideBySideActive()) {
        return; // Skip height adjustment when in side-by-side mode
      }
      var contentHeight = cm.getScrollerElement().querySelector('.CodeMirror-sizer').scrollHeight;
      var padding = 10; // Add some padding to ensure no clipping
      var newHeight = contentHeight + padding;
      var wrapperElement = cm.getWrapperElement();
      var scrollerElement = cm.getScrollerElement();

      wrapperElement.style.height = newHeight + 'px';
      scrollerElement.style.maxHeight = newHeight + 'px';
      scrollerElement.style.height = newHeight + 'px';

      debug('===============================');
      debug('wrapperElement.style.height:', wrapperElement.style.height);
      debug('scrollerElement.style.maxHeight:', scrollerElement.style.maxHeight);
      debug('scrollerElement.style.height:', scrollerElement.style.height);
    }

    // Initial height setting based on content
    if (simplemde.value().trim() === "") {
      // Set initial height to 4 rows when empty
      var initialHeight = '100px'; // 100px corresponds to 4 rows
      var wrapperElement = cm.getWrapperElement();
      var scrollerElement = cm.getScrollerElement();

      wrapperElement.style.height = initialHeight;
      scrollerElement.style.maxHeight = initialHeight;
      scrollerElement.style.height = initialHeight;

      debug('===============================');
      debug('Initial empty editor height settings');
      debug('wrapperElement.style.height:', wrapperElement.style.height);
      debug('scrollerElement.style.maxHeight:', scrollerElement.style.maxHeight);
      debug('scrollerElement.style.height:', scrollerElement.style.height);
    } else {
      // Adjust height based on content
      adjustHeight();
    }

    // Adjust height on content change
    cm.on('change', adjustHeight);

    // Adjust height when exiting side-by-side mode
    cm.on('modeChange', function() {
      if (!simplemde.isSideBySideActive()) {
        setTimeout(adjustHeight, 0);
      }
    });

    debug('SimpleMDE initialized for', textarea.id, ':', simplemde);
  }
  // Add an event listener for the custom event
  document.addEventListener('simpleMDELoaded', function() {
    debug('SimpleMDE is loaded');
    const observer = new MutationObserver(function(mutations) {

    })
    document.querySelectorAll('textarea.editor-textarea').forEach(function(textarea) {
      renderEditor(textarea);
    });
  });
</script>
