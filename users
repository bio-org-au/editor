\i p-alter-org-rename-no-org.sql 
\i q-alter-org-add-can-vote.sql 
grant select, insert, update, delete on name_review_vote to webapni;
grant select, insert, update, delete on batch_reviewer to webapni;
\d org_batch_review_voter
select * from org_batch_review_voter
;
drop table org_batch_review_voter;
\d name_review_comment
\d name_review_comment
\d name_review_comment_type;
\d batch_review_voter_v
\dv batch_review_voter_v
\dv
\d user_table
\d usefrs
\d users
d batch_reviewers
;
d batch_reviewer
;
\d batch_reviewer
;
\d org
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = $1 AND (batch_review_period_id in (select id from batch_review_period brp where brp.id = 51785034));
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785034 AND (batch_review_period_id in (select id from batch_review_period brp where brp.id = 51785034));
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785034; 
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785037 and "NAME_REVIEW_COMMENT"."BATCH_REVIEW_PERIOD_ID" = 51785035
;
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785037 and "name_review_comment"."BATCH_REVIEW_PERIOD_ID" = 51785035
;
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785037 and "name_review_comment".BATCH_REVIEW_PERIOD_ID = 51785035
;
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785034; 
SELECT COUNT(*) FROM "name_review_comment" WHERE "name_review_comment"."batch_reviewer_id" = 51785034; 
DELETE FROM "batch_reviewer" WHERE "batch_reviewer"."id" = 51785037;
\d name_review_vote
alter table name_review_vote drop column batch_reviewer_id;
\w alter-name-review-vote-drop-batch-reviewer-id.sql
select * from org;
update org set can_vote where abbrev = 'MEL';
update org set can_vote = true where abbrev = 'MEL';
update org set can_vote = false where abbrev = 'MEL';
update org set can_vote = true where abbrev = 'MEL';
\q
\! ls
\! cat alt*
\d name_review_vote
\i alter-name-review-vote-drop-batch-reviewer-id.sql 
\d name_review_vote
\d name_review_vote
\i alter-name-review-vote-drop-batch-reviewer-id.sql 
select * from org;
update org set can_vote = true where not not_a_real_org;
select * from batch_stack_v where id = 51738405;
select * from batch_stack_v;
select display_as from batch_stack_v;
select batch_name, display_as from batch_stack_v;
\i a-alter-batch-stack-v.sql 
\i a-alter-batch-stack-v.sql 
\i a-alter-batch-stack-v.sql 
\i a-alter-batch-stack-v.sql 
\i a-alter-batch-stack-v.sql 
select batch_name, display_as from batch_stack_v;
select batch_name, display_as from batch_stack_v where batch_name= 'APC 2022 Updates';
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
\i a-alter-batch-stack-v.sql 
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
\i a-alter-batch-stack-v.sql 
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
\i a-alter-batch-stack-v.sql 
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
\i a-alter-batch-stack-v.sql 
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
\i a-alter-batch-stack-v.sql 
select batch_name, display_as, order_by from batch_stack_v where batch_name= 'APC 2022 Updates';
select * from batch_stack_v;
select * from batch_stack_v where id = 51738405;
select * from name_review_vote;
\d name_review_votes
\d name_review_vote
set datestyle
;
show datestyle;
show timestyle;
show lc_time
;
select now();
select truc(now());
select now().trunc();
select now()::timestamp(0);
select * from  name_review_vote order by created_at;
select * from  name_review_vote order by created_at desc;
\d name_Review_vote;
select org_id, count(*) from  name_review_vote group by org_id;
delete from name_review_vota where org_id = 51614649;
delete from name_review_vote where org_id = 51614649;
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;;
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;;
\pwd
\! pwd
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
\q
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
select max(created_at) from name;
select count(*) from name where uri like 'php%';
\d name
\q
\d tree_element
\d tree
\dt
\d loader_name
select * from orgs;
select * from org;
select * from org where can_vote;
update org set can_vote = true where !not_a_real_org;
update org set can_vote = true where not_a_real_org = false;
select * from org where can_vote;
SELECT "loader_name".* FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" WHERE "loader_name"."loader_batch_id" = $1 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = $2 AND ((name_review_vote.org_id is null or name_review_vote.org_id = 51614645)) ORDER BY sort_key, seq;
SELECT "loader_name".* FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' and ((NAME_REVIEW_VOTE.ORG_ID IS NULL OR NAME_REVIEW_VOTE.ORG_ID = 51614645)) order by SORT_KEY, SEQ;
SELECT "loader_name".simple_name FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' and ((NAME_REVIEW_VOTE.ORG_ID IS NULL OR NAME_REVIEW_VOTE.ORG_ID = 51614645)) order by SORT_KEY, SEQ;
SELECT "loader_name".simple_name FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' order by SORT_KEY, SEQ;
SELECT "loader_name".* FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" and name_review_vote.org = 51614645 WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' and order by SORT_KEY, SEQ;
SELECT "loader_name".* FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" and name_review_vote.org = 51614645 WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' order by SORT_KEY, SEQ;
SELECT "loader_name".* FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" and name_review_vote.org_id = 51614645 WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' order by SORT_KEY, SEQ;
SELECT "loader_name".simple_name FROM "loader_name" LEFT OUTER JOIN "name_review_vote" ON "name_review_vote"."loader_name_id" = "loader_name"."id" and name_review_vote.org_id = 51614645 WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae' order by SORT_KEY, SEQ;
select * from org;
 SELECT "loader_name".* FROM "loader_name" WHERE "loader_name"."loader_batch_id" = $1 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = $2 ORDER BY sort_key, seq  [["loader_batch_id", 51739032], ["family", "Araceae"]] (pid:66534)
;
SELECT "loader_name".* FROM "loader_name" WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae';
SELECT "loader_name".simple_name FROM "loader_name" WHERE "loader_name"."loader_batch_id" = 51739032 AND (record_type in ('accepted', 'excluded')) AND "loader_name"."family" = 'Araceae';
sselect id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
\q
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
 select record_type, count(*) from loader_name group by record_type;
select count(*) from name_review_vote;
select count(*), max(created_at) from name_review_vote;
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
select  *
from name
where id = 109509;
select count(*) from name where uri is not null;
select count(*) from name where uri is null;
\q
select max(updated_at) from name;
select max(created_at) from name;
\q
\q
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
\q
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
select max(created_at), max(updated_at) from name;
select max(created_at), max(updated_at) from reference;
\
\q
select * from org;
select * from org where can_vote;
update org set can_vote = true where !not_a_real_org;
update org set can_vote = true where not not_a_real_org;
begin; update org set can_vote = true where !not_a_real_org;
rollback;
begin;
update org set can_vote = true where not not_a_real_org;
commit;
select user;
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
create user nslapp identified by 'nslapp';
create user nslapp with password 'nslapp';
select id, full_name, created_at, created_by, updated_at, updated_by, uri
from name
where id = 109509;
select * from mapper.match where lower(uri) like '%php%';
select * from mapper.match where lower(uri) like '%109509%';
\d mapper.match
\d mapper.match
select * from mapper.match where lower(uri) like '%109509';
select * from mapper.match where lower(uri) like '%apni%109509';
\q
select * from mapper.match where lower(uri) like '%apni%109509';
select * from mapper.match where lower(uri) like '%name%apni%109509';
select * from instance_note_type;
\dt inst*
select * from instance_note_key;
\d profile_item
\dt
\q
\dt
\d instance_type
select * from instance_type;
select * from instance_type where primary_instance;
select name from instance_type where primary_instance;
select name from instance_type where primary_instance = false;
select name from instance_type where primary_instance and relationship_instance;
\d instance_type
select name from instance_type where primary_instance and relationship;
select name from instance_type where relationship order by name;
select name from instance_type where relationship and not deprecated order by name;
\d instance_type
select name from instance_type where relationship and not synonym;
select name from instance_type where synonym and not relationship;
select name from instance_type where synonym and primary_instance;
select name from instance_type where relationship and primary_instance;
select name from instance_type where synonym and standalone;
select name from instance_type where not (synonym or standalone);
select name from instance_type where not deprecated and not (synonym or standalone);
select name from instance_type where not deprecated and not (relationship or standalone);
select name from instance_type where relationship and standalone;
select name from instance_type where standalone and not deprecated order by name;
\d instance_type
select name from instance_type where relationship and not unsourced and not deprecated order by name;
select name from instance_type where relationship and unsourced and not deprecated order by name;
select name from instance_type where not deprecated and not (relationship or standalone);
select name from instance_type where not deprecated and not (relationship or standalone or synonym);
select name from instance_type where not deprecated and synonym and not relationship;
\q
select name from instance_type where not deprecated and synonym and not relationship;
select * from instance_type where not deprecated and synonym and not relationship;
select name, standalone, relationship, synonym from instance_type where not deprecated and synonym and not relationship;
select name, standalone, relationship, synonym, doubtful, pro_parte from instance_type where not deprecated and synonym and not relationship;
\d instance_type
select * from instance_type where primary_instance;
select pbool(true);
select pbool(t);
select pbool(1=1);
\df pbool
\df+ pbool
ntypes
;
\whoami
whoami
;
show whoami
;
\d nfm
\show HISTFILE
\set HISTFILE
PRINT 'x'
;
echo 'fred';
select 'fred';
select %whoami;
\pset null '¤'
select * from name limit 1;
\q
\show HISTFILE
\?
\set
\set
select * from instance_type limit 4
;
\pset linestyle unicode
select * from instance_type limit 4
;
select * from instance_type limit 2
;
\d name_type;
select * from name_type order by name limit 2;
\pset linestyle unicode
\x
select * from name_type order by name limit 2;
\x
select * from name_type order by name limit 2;
\pset border 2
select * from name_type order by name limit 2;
\set PROMPT1 '%[%033[33;1m%]%x%[%033[0m%]%[%033[1m%]%/%[%033[0m%]%R%# '
select * from name_type order by name limit 2;
\q
\x
select * from name;
\set
\set pager
\pset
\pset linestyle unicode
select * from name limit4;
select * from name limit 4;
\pset linestyle ascii
select * from name limit 4;
\set PROMPT1 '%M:%[%033[1;31m%]%>%[%033[0m%] %n@%/%R%#%x '
\set PROMPT1 '%001%[%033[1;32;40m%][%`hostname`] %002%n@%/%R%001%[%033[0m%]%002%# '
\q
\set PROMPT1 '%001%[%033[1;32;40m%][%`hostname`] %002%n@%/%R%001%[%033[0m%]%002%# '
select ....
;
\set nfm
\st
\set
\q
\set
\d :nfm
\dt
\q
select count(*) from :tve;
:tve sss;
:scfrom name;
\set foo 'select 1;'
:foo
:foo
:foo from name;
:foo from name;
:trees;
select 1=1;
select 1=1;
:trees 
;
select * from instance_type where name = 'broader taxon concept';
select * from instance_type where name like 'broader%';
select * from instance_type where name like 'congruent%';
\d
select * from users;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 100
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  union all
    select N+1 from T where N < 100
)
select SUM(N) from T;LUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 100
;
values(1)  UNION ALL
    SELECT n+1 FROM t WHERE n < 100
;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  union all
    select N+1 from T where N < 100
)
select SUM(N) from T;LUES (1)
WITH RECURSIVE t(n) AS (
    VALUES (1)
  union all
    select N+1 from t where N < 100
)
select SUM(N) from T;LUES (1)
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM T WHERE n < 100
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM T WHERE n < 10
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (2)
  UNION ALL
    SELECT n+1 FROM T WHERE n < 10
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (9)
  UNION ALL
    SELECT n+1 FROM T WHERE n < 10
)
SELECT sum(n) FROM t;
SELECT n+1 FROM t WHERE n < 100;
\
\! pwd
WITH RECURSIVE t(n) AS (
    VALUES (9)
  UNION ALL
    SELECT n+1 FROM T WHERE n < 10
)
SELECT sum(n) FROM t;
\w sum.sql
\w factorial.sql
\i factorial.sql 
WITH RECURSIVE tens AS (
   SELECT 1 as n
 UNION ALL
   SELECT n+1 FROM tens
)
SELECT n FROM tens limit 10;
WITH RECURSIVE xxxs AS (
   SELECT 1 as n
 UNION ALL
   SELECT n+1 FROM xxxs
)
SELECT n FROM tens limit 10;
WITH RECURSIVE xxxs AS (
   SELECT 1 as n
 UNION ALL
   SELECT n+1 FROM xxxs
)
SELECT n FROM xxxs limit 10;
WITH RECURSIVE xxxs AS (
   SELECT 1 as n
 UNION ALL
   SELECT n+1 FROM xxxs
)
SELECT n FROM xxxs limit 100;
WITH RECURSIVE xxxs AS (
   SELECT 100 as n
 UNION ALL
   SELECT n-1 FROM xxxs
)
SELECT n FROM xxxs limit 10;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
)
SELECT n FROM xxxs limit 10;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
)
SELECT n FROM xxxs limit 20;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
)
SELECT n FROM xxxs limit 40;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
 where N < 5)
SELECT n FROM xxxs limit 20;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
 where N <= 30)
SELECT n FROM xxxs limit 20;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n-1 FROM xxxs
 where N <= 21)
SELECT n FROM xxxs limit 20;
WITH RECURSIVE xxxs AS (
   SELECT 20 as n
 UNION ALL
   SELECT n(n-1) FROM xxxs
 where N <= 21)
SELECT n FROM xxxs limit 20;
WITH RECURSIVE fact (n, factorial)
AS (
    SELECT 1 as n, 5 as factorial
union all
    SELECT n+1, factorial*n FROM fact WHERE n < 5
)
SELECT * FROM fact;
WITH RECURSIVE fact (n, factorial)
AS (
    SELECT 1 as n, 5 as factorial
union all
    SELECT n+1, factorial*n FROM fact WHERE n < 3
)
SELECT * FROM fact;
WITH RECURSIVE fact (n, factorial)
AS (
    SELECT 1 as n, 5 as factorial
union all
    SELECT n+1, factorial*n FROM fact WHERE n < 5
)
SELECT * FROM fact;
WITH RECURSIVE fact (n, factorial)
AS (
    SELECT 1 as n, 5 as factorial
union all
    SELECT n+1, factorial*n FROM fact WHERE n < 6
)
SELECT * FROM fact;
\! pwd
with children(parent_id) 
as (select simple_name from name where parent_id is null)
union all
(select simple_name from name where parent_id = parent)
select simple_name from children(222);
with children(parent) 
as (select simple_name from name where parent_id is null)
union all
(select simple_name from name where parent_id = parent)
select simple_name from children(222);
\d name
with children(parent) 
as (select simple_name from name where parent_id is null
union all
select simple_name from name where parent_id = parent)
select simple_name from children(222);
with children(parent) 
as (select simple_name from name where parent_id is null
union all
select simple_name from children where parent_id = parent)
select simple_name from children(222);
with recursive children(parent) 
as (select simple_name from name where parent_id is null
union all
select simple_name from children where parent_id = parent)
select simple_name from children(222);
with recursive children(parent) 
as (select simple_name from name where parent_id is null
union all
select * from children where parent_id = parent)
select simple_name from children(222);
with recursive children(parent) 
as (select simple_name from name where parent_id is null
union all
select children.simple_name from children where parent_id = parent)
select simple_name from children(222);
select * from name where simple_name = 'Angophora';
CREATE TABLE employees (
  employee_id SERIAL PRIMARY KEY,
  full_name VARCHAR NOT NULL,
  manager_id INT
);
\
\w create-table-employees.sql
INSERT INTO employees (employee_id, full_name, manager_id)
VALUES
  (1, 'Michael North', NULL),
  (2, 'Megan Berry', 1),
  (3, 'Sarah Berry', 1),
  (4, 'Zoe Black', 1),
  (5, 'Tim James', 1),
  (6, 'Bella Tucker', 2),
  (7, 'Ryan Metcalfe', 2),
  (8, 'Max Mills', 2),
  (9, 'Benjamin Glover', 2),
  (10, 'Carolyn Henderson', 3),
  (11, 'Nicola Kelly', 3),
  (12, 'Alexandra Climo', 3),
  (13, 'Dominic King', 3),
  (14, 'Leonard Gray', 4),
  (15, 'Eric Rampling', 4),
  (16, 'Piers Paige', 7),
  (17, 'Ryan Henderson', 7),
  (18, 'Frank Tucker', 8),
  (19, 'Nathan Ferguson', 8),
  (20, 'Kevin Rampling', 8);
\w insert-employees.sql
select * from employees;
WITH RECURSIVE subordinates AS (
  SELECT
    employee_id,
    manager_id,
    full_name
  FROM
    employees
  WHERE
    employee_id = 2
  UNION
  SELECT
    e.employee_id,
    e.manager_id,
    e.full_name
  FROM
    employees e
    INNER JOIN subordinates s ON s.employee_id = e.manager_id
)
SELECT * FROM subordinates;
\w recursive-employees.sql
\w recursive-names-like-employees.sql
\i recursive-names-like-employees.sql
select parent_id from name where id = 91714;
\i recursive-names-like-employees.sql
\i recursive-names.sql 
select id, simple_name from name where name_rank_id = (select id from name_rank where name = 'familia');
select id from name_rank where name = 'familia';
select id, name from name_rank order by 2;
select id, simple_name from name where name_rank_id = (select id from name_rank where name = 'Familia');
select id, simple_name from name where name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
select id, simple_name from name where simple_name like 'A%' and name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
select id, simple_name from name where simple_name like 'An%' and name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
\! pwd
ndev
\d instance_type
select * from instance_type limit 1;
ndev
select * from instance_type limit 1;
select * from instance_type limit 1;
select * from instance_type where deprecated limit 1;
select * from name limit 1;
\d tree_element
\d tree_element
\dt tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
\d tree_element
select * from name limit 1;
select * from name limit 1;
\d tree_element
select * from instance_type where deprecated;
select true, false;
\pset true TRUE
select true, false;
\pset true TRUE
\pset t TRUE
select true, false;
\pset true::boolean TRUE
\pset t::boolean TRUE
\pset true TRUE
select id, simple_name from name where name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
select id, simple_name from name where simple_name like 'An%' and name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
select id, simple_name from name where simple_name like 'Ana%' and name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
\! ls
\w some-families.sql
\i some-families.sql
select id, simple_name from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia') order by 2;
select id, simple_name from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia') or
;
\d name
select family_id, count(*) select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia') or
;
select family_id, count(*) from select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia') or
;
select family_id, count(*) from name  select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia') or
;
select family_id, count(*) from name where family_id in (select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia')); 
select family_id, count(*) from name where family_id in (select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family_id; 
\w family-id-group-count.sql
\i family-id-group-count.sql
select family.simple_name, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family_id; 
select family.simple_name, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Ana%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Euc%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
\w family-name-with-member-count.sql
select family.simple_name, exi name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.fred, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.fred, name.family_id, adfasda count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.name.family_id, adfasda count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
select family.simple_name, name.family_id, count(*) from name join name family on name.family_id = family.id where family.family_id in (select id from name families where families.simple_name like 'Myr%' and families.name_rank_id = (select id from name_rank where name = 'Familia'))group by family.simple_name, name.family_id; 
WITH DistinctValues AS (
    SELECT DISTINCT column_name
    FROM table_name
)
SELECT * FROM DistinctValues;
\d information_schema.tables
\d information_schema.*
\dt information_schema.*
\dt information_schema.t*
\d information_schema.t*
\d information_schema
\d information_schema.*
\d information_schema.tables
\d information_schema.tab*
\d information_schema.*col*
\d information_schema.table_catalog
\dv information_schema.*
\dv information_schema.columns
\d information_schema.columns
select table_name, column_name from information_schema.columns order by 1,2;
WITH DistinctValues AS (
    SELECT DISTINCT column_name
    FROM table_name
)
SELECT * FROM DistinctValues;
WITH DistinctValues AS (
    SELECT DISTINCT column_name
    FROM information_schema.columns
)
SELECT * FROM DistinctValues;
    SELECT DISTINCT column_name
    FROM information_schema.columns;
t
exit
exit
\q
\dt
select count(*) from profile_text;
select count(*) from product;
select count(*) from product_item_config;
select count(*) from profile_item;
select count(*) from profile_item_annotation;
select count(*) from profile_item_reference;
\dt pro*
select count(*) from product;
select count(*) from product_item_config;
select count(*) from product_item;
select count(*) from profile_item;
select count(*) from profile_item_annotation;
select count(*) from profile_item_reference;
select count(*) from profile_item_type;
select count(*) from profile_object_type;
select count(*) from profile_text;
select count(*) from profile_text;
select count(*) from profile_object_type;
select count(*) from profile_item_type;
select count(*) from profile_item_annotation;
\dt pro*
select count(*) from product;
select count(*) from product_item_config;
\timing
select count(*) from product_item;
select count(*) from profile_item;
\i foo-8-select-list-values-multi-column-sums.sql 
\! cat foo-8*
\q
\set PROMPT1 '%M:%[%033[1;31m%]%>%[%033[0m%] %n@%/%R%#%x '
\q
\q
\q
\q
\q
select user;
values (3,3,3,3,3)
;
\?
\ds
\q
drop sequence orchids_seq;
\ds
\ds *.*
drop sequence archive.orchids_names_id_seq;
\d tree
\d org
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) in (select abbrev from org where lower(abbrev) like 'asdfas')
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq
;
SELECT count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) in (select abbrev from org where lower(abbrev) like 'asdfas')
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq
;
SELECT count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) in (select abbrev from org where lower(abbrev) like 'asdfas')
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' ); 
select abbrev from org where lower(abbrev) like 'asdfas';
select coalesce(abbrev,'%') from org where lower(abbrev) like 'asdfas';
select abbrev from org where lower(abbrev) like 'asdfas' union select '%';
select abbrev from org where lower(abbrev) like 'mel' union select '%';
select max(abbrev) from org where lower(abbrev) like 'mel' union select '%';
select max(abbrev) from (select abbrev from org where lower(abbrev) like 'mel' union select '%' abbrev);
select max(abbrev) from (select abbrev from org where lower(abbrev) like 'mel' union select '%' abbrev) sub;
select max(abbrev) from (select abbrev from org where lower(abbrev) like 'xxx' union select '%' abbrev) sub;
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) in (select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub)
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq;
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) in (select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub)
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' ) ;
select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub
;
select min(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub
;
selecct count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like (select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub)
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' );
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like (select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub)
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' );
select max(abbrev) from (select abbrev from org where lower(abbrev) like 'asdfas' union select '%' abbrev) sub
;
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%' )
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' );
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%' 
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' );
select count(*) FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and not exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%' )
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51739032' );
create user nslapp;
grant select on shard_config to nslapp;
grant select on namespace to nslapp;
\q
grant select, insert, update, delete  on notification to nslapp;
\i grants-to-nslapp.sql 
\q
select id, created_at, created_by from name ordered by id limit 20;
select id, created_at, created_by from name order by id limit 20;
select id, created_at::date, created_by from name order by id limit 20;
select created_at::date, created_by, count(*) from name group by created_at::date, created_by;
select created_at::date, created_by, count(*) from name group by created_at::date, created_by order by count(*) desc;
\d org
select name from org;
\d users
\d batch_reviewer
\! ls -lart
\i recursive-names.sql 
\! cat sum.sql
\i sum.sql 
\i recursive-name-walk-up.sql 
\prompt 'Tell me your name: ' name
SELECT 'Hello ' || :'name';
SELECT 'Hello ' || :'xxx';
\prompt xxx
SELECT 'Hello ' || :'xxx';
\i recursive-name-walk-up.sql 
select full_name from name where id = 91755;
\i recursive-name-walk-up.sql 
\dt
\d batch_review_period
\d batch_reviewer
\d org
\d org
\q
\d batch_reviewer
alter table batch_reviewer alter column org_id drop not null;
\w make-org-id-nullable.sql
\d org
alter table org drop column not_a_real_org;
\w drop-col-not-a-real-org.sql
select * from org;
delete from org where name = 'No Organisation - Unaffiliated';
alter table batch_review drop constraint batch_reviewer_user_org_fk;
alter table batch_reviewer drop constraint batch_reviewer_user_org_fk;
\w drop-constraint-batch-reviewer-user-org-fk;
delete from org where name = 'No Organisation - Unaffiliated';
\w delete-org-no-org-unaffiliated.sql
    SELECT DISTINCT table_name
    FROM information_schema.columns ;
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'N%';
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'n%';
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'name%';
\d information_schema.columns
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'name_%';
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'name_%'
  and table_name not like '%_v';
    SELECT DISTINCT table_name
    FROM information_schema.columns 
where table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw');
    SELECT table_name
    FROM information_schema.columns 
where table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw');
    SELECT table_name, count(*)
    FROM information_schema.columns 
where table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_name
order by table_name;
\d name_view
    SELECT table_schema, table_name, count(*)
    FROM information_schema.columns 
where table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_schema, table_name
order by table_schema, table_name;
    SELECT table_schema, table_name, count(*)
    FROM information_schema.columns 
where table_schema = 'publis' table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_schema, table_name
order by table_schema, table_name;
    SELECT table_schema, table_name, count(*)
    FROM information_schema.columns 
where table_schema = 'public' and table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_schema, table_name
order by table_schema, table_name;
ELECT table_name, count(*)
    FROM information_schema.columns
where table_schema = 'public'
  and table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_name
order by table_name;
SELECT table_name, count(*)
    FROM information_schema.columns
where table_schema = 'public'
  and table_name like 'name_%'
  and not (table_name like '%_v' or table_name like '%_vw')
group by table_name
order by table_name;
select family_id, count(*) from name group by family_id;
with family_members as (
  select family_id, count(*) family_count
    from name
   group by family_id
)
select family_count/(select count(distinct family_id) from name where family_id is not null)
  from family_members;
select family_id, count(*) from name group by family_id;
with family_members as (
  select family_id, count(*) family_count
    from name
   group by family_id
)
select family_count/(select count(distinct family_id) from name where family_id is not null)
  from family_members;
select family_id, count(*) from name group by family_id;
select (count(*) * 1.0)/(select count(distinct family_id) from name where family_id is not null)
  from name 
 where family_id is not null;
p
select (count(*) * 1.0)/(select count(distinct family_id) from name where family_id is not null) average
  from name 
 where family_id is not null;
select (count(*) * 1.0)/(select count(distinct family_id) from name where family_id is not null) average
  from name 
 where family_id is not null;
with family_members as (
  select family_id, count(*) family_count
    from name
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members;
with family_members as (
  select family_id, count(*) family_count
    from name
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members
 where family_id is not null;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members
 where family_count > 1;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members
 where family_count > 10;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members
 where family_count > 100;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from name where family_id is not null)
  from family_members
 where family_count > 1000;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select sum(family_count)/(select count(distinct family_id) from family_members where family_count > 1)
  from family_members
 where family_count > 1;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select * from family_members where family_count > 1
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select * from family_members where family_count > 100
;

with family_members as (
  select family_id, count(*) family_member_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, fm.family_member_count from family_members where family_count > 100
;

with family_members as (
  select family_id, count(*) family_member_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, fm.family_member_count
  from family_members fm 
 where family_count > 100
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, fm.family_count
  from family_members fm 
 where family_count > 100
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join
       name 
       on fm.parent_id = name.id
 where family_count > 100
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join
       name 
       on fm.family_id = name.id
 where family_count > 100
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join
       name 
       on fm.family_id = name.id
 where family_count > 100
 order by name.simple_name
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join
       name 
       on fm.family_id = name.id
 where family_count > 100
 order by family_count desc, name.simple_name
;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join name 
       on fm.family_id = name.id
 where family_count > 500
 order by family_count desc, name.simple_name
;
select family.simple_name,
       family.id,
       count(*) family_count
  from name as family 
       join name as member
       on family.id = member.family_id
 where member.family_id is not null;
select family.simple_name,
       family.id,
       count(*) family_count
  from name as family 
       join name as member
       on family.id = member.family_id
 where member.family_id is not null
 group by family.simple_name,
          family.id
;

select family.simple_name,
       family.id,
       count(*) family_count
  from name as family 
       join name as member
       on family.id = member.family_id
 where member.family_id is not null
 group by family.simple_name,
          family.id
 having count(*) > 500
 order by count(*) desc, family.simple_name
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join name 
       on fm.family_id = name.id
 where family_count > 500
 order by family_count desc, name.simple_name
;

select family.simple_name,
       family.id,
       count(*) family_count
  from name as family 
       join name as member
       on family.id = member.family_id
 where member.family_id is not null
 group by family.simple_name,
          family.id
 having count(*) > 500
 order by count(*) desc, family.simple_name
;

with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join name 
       on fm.family_id = name.id
 where family_count > 500
 order by family_count desc, name.simple_name
;
select family.id,
       family.simple_name,
       count(*) family_count
  from name as family 
       join name as member
       on family.id = member.family_id
 where member.family_id is not null
 group by family.simple_name,
          family.id
 having count(*) > 500
 order by count(*) desc, family.simple_name
;
with family_members as (
  select family_id, count(*) family_count
    from name
   where family_id is not null
   group by family_id
)
select fm.family_id, name.simple_name, fm.family_count
  from family_members fm 
       join name 
       on fm.family_id = name.id
 where family_count > 500
 order by family_count desc, name.simple_name
;
select values(1);
values(1);
values(1,2,3);
VALUES (1, 'one'), (2, 'two'), (3, 'three');
values(1,2,3), (3,4,5), (3,33,3);
values(1)
;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 100
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 1
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 2
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < -2
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < -2888
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 1
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 0
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n FROM t WHERE n < 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n > 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (0)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 4
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (0)
  UNION ALL
    SELECT n+1 FROM t WHERE n < 3
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (0)
  UNION ALL
    SELECT n+1 FROM t WHERE n <= 3
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (10)
  UNION ALL
    SELECT n-1 FROM t WHERE n <= 8
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (10)
  UNION ALL
    SELECT n-1 FROM t WHERE n < 8
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (10)
  UNION ALL
    SELECT n-1 FROM t WHERE n < 1
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (10)
  UNION ALL
    SELECT n-1 FROM t WHERE n > 8
)
SELECT sum(n) FROM t;
WITH RECURSIVE t(n) AS (
    VALUES (10)
  UNION ALL
    SELECT n-1 FROM t WHERE n > 0
)
SELECT sum(n) FROM t;
foo as (select 'x');
with foo as (select 'x');
with foo as (select 'x') select * from foo;
\w foo-1.sql
with foo as (select 'x' union select 'y') select * from foo;
\w foo-2.sql
with foo as (values (1,2,3), (3,3,3), (5,4,3)) select * from foo;
\w foo-2-with-values.sql
with foo as (select 2 c1 union select 2) select * from foo;
with foo as (select 2 c1 union all select 2) select * from foo;
\w foo-3-union-all.sql
with foo as (select 2 c1 union all select 2) select sum(c1) from foo;
\w foo-4-union-all-then-sum.sql
with foo as (select 2 c1 union all select 2 union select 333) select sum(c1) from foo;
\w foo-5-union-all-then-sum.sql
with foo as (select 2 c1 union all select 2 union select 333) select (sum(c1)*1.0)/(select count(*) from foo) avg from foo;
\w foo-6-union-all-then-sum-then-average.sql
with foo(a) as (select 2 union all select 2 union select 333) select sum(a) from foo;
\w foo-7-column-list-union-all-then-sum-then-average.sql
with foo(a) as (select 2 union all select 2 union select 333) select sum(a) from foo;
with foo(a, b, c) as (values (2,4,5), (3,5,7), (4,2,1) (6,5,2)) select sum(a) from foo;
with foo(a, b, c) as (values (2,4,5), (3,5,7), (4,2,1), (6,5,2)) select sum(a) from foo;
with foo(a, b, c) as (values (2,4,5), (3,5,7), (4,2,1), (6,5,2)) select sum(a), sum(b), sum(c) from foo;
\w foo-8-select-list-values-multi-column-sums.sql
select * from instance where id = 52329162;
select * from instance where id = 458122;
\d shard_config
select * from shard_config;
\x
select * from shard_config;
select name, value from shard_config order by name;
select name, value from shard_config where length(value) < 50 order by name;
\q
select name, value from shard_config where length(value) < 50 order by name;
select name, value from shard_config where length(value) < 50 order by name;
\q
select name, value from shard_config where length(value) < 50 order by name;
\s shard_config
\d shard_config
select * from shard_config where length(value) < 50 order by name;
\ds *.*
drop sequence archive.orchids_names_id_seq;
drop sequence archive.orchid_processing_logs_id_seq 
;
select * from batch_review;
select * from batch_review;
\d batch_review
\d batch_review_period
\d loader_batch_review
\d batch_review
select * from batch_review;
select * from loader_batch;
select * from batch_review;
select * from loader_batch;
select * from loader_batch;
select * from batch_review;
select * from batch_review_period;
\d batch_reviewer
select count(*) from instance where page_qualifier is not null;
\d batch_review
select * from batch_review_period;
select * from batch_review_period;
select * from batch_review_period;
select * from batch_review_period;
\q
select * from batch_review_period;
\d instance
select name from instance_type;
select * from instance_type where name like 'sec%';
\d instance_type
select name from instance_type where secondary_instance;
\d instance
select * from users;
\d tree_element
\d instance
\d name
\d reference
select count(*) from tree;
select count(*) from tree_element;
select count(*) from tree_version;
select count(*) from tree_version_element;
select count(*) from tree_element;
select count(*) from tree_element where not exists (select null from instance where id = tree_element.instance_id);
\d tree_version_element
select count(*) from tree_version;
select count(*) from tree_version tv where exists (select null from tree_version_element tve where tve.tree_version_id = tv.id);
select count(*) from tree_version tv where exists (select null from tree_version_element tve where tve.tree_version_id = tv.id where not exists (select null from tree_element te where te.id = tve.tree_element_id));
select count(*) from tree_version tv where exists (select null from tree_version_element tve where tve.tree_version_id = tv.id and not exists (select null from tree_element te where te.id = tve.tree_element_id));
select count(*) from tree_version tv where exists (select null from tree_version_element tve where tve.tree_version_id = tv.id and exists (select null from tree_element te where te.id = tve.tree_element_id and not exists (select null from instance where id = te.instance_id)));
\w a.sql
\i a.sql 
\d tree_version
\i b-list-affected-tree-versions.sql 
\d tree_version
\i b-list-affected-tree-versions.sql 
\i c-list-affected-tree-versions-with-missing-count.sql 
\i b-list-affected-tree-versions.sql 
\dv
select count(*) from tree_v;
select count(*) from tree_join_v;
select count(distint tree_version_element_id) from tree_join_v;
select count(distint tree_version_id) from tree_join_v;
select count(distinct tree_version_id) from tree_join_v;
select count(*) from tree_join_v where not exists (select null from instance where id = instance_id);
select tree_version_id, draft_name, count(*) from tree_join_v where not exists (select null from instance where id = instance_id) group by tree_version_id, draft_name order by tree_version_id;
\w c-list-affected-tree-versions-with-count-of-missing-instances.sql
select instance_id from tree_join_v where tree_version_id = 51310330 and not exists (select null from instance where id = instance_id);
select distinct instance_id from tree_join_v where tree_version_id = 51310330 and not exists (select null from instance where id = instance_id);
select instance_id from tree_join_v where tree_version_id = 51310330 and not exists (select null from instance where id = instance_id);
\w d-sample.sql
\i c-list-affected-tree-versions-with-count-of-missing-instances.sql 
select count(*) from tree_version;
\! ls
\i a-count-affected-tree-versions.sql 
\d users
select * from users;
\i sum.sql 
\bat sum.sql
\! bat sum.sql
\d tree_element
select instance_link, count(*) from tree_element group by instance_link;
select instance_id, instance_link from tree_element where instance_id = 51791685;
\s users
grant insert, update, delete, select on profile_item_type to webapni;
grant insert, update, delete, select on profile_item_type to webapni;
\d tree_join_v
\dv
select count(*) from tree_join_v;
select distinct instance_id from tree_join_v;
select count(*) from (select distinct instance_id from tree_join_v);
select count(*) from (select distinct instance_id from tree_join_v) fred;
select count(*) from (select distinct instance_id from current_tree_vw) fred;
 select distinct instance_id from tree_join_v
minus
select distinct instance_id from current_tree_vw;
 select distinct instance_id from tree_join_v
except
select distinct instance_id from current_tree_vw;
\s non-current-instance-ids.sql
\w non-current-instance-ids.sql
select count(*) from instance where id = 51799545;
select count(*) from instance where id = 727221;
select count(*) from instance where id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
\w b-sample-instance-ids.sql
select count(*) from current_tree_vw where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
\w c-showing-sample-not-in-current-tree.sql
select count(*) from tree_join_v where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
select instance_id from tree_join_v where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
select distinct instance_id from tree_join_v where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
\! ls
\! mv non-current-* a-non-current-instance-ids.sql
\! ls
select distinct instance_id from tree_join_v where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
\! cat c-sh*
select count(*) from current_tree_vw where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
\q
select count(*) from current_tree_vw where instance_id in (    51802835,
      659483,
      772749,
      624386,
      496601,
      551733,
      749278,
      583601,
    51802241,
      727221,
    51799545)
;
echo 'Styphelia melaleucoides F.Muell.'
;
\! ls
\! a-non*
\! cat a-non*
\d users
select * from users;
\d users
\d tree_element
\dv
\dv+ current_tree_vw 
\dv current_tree_vw 
\d+ current_tree_vw 
\d+ current_tree_vw 
\d+ tree_v
\dv tree*
\dv *tree*
\d+ current_accepted_tree_version_vw 
select count(*) from  current_accepted_tree_version_vw ;
\d tree_vw;
\d+ tree_vw
\d+ tree_join_v 
\dv *tree*
\d+ tree_closure_v 
\dv *tree*
\d+ tree_v
select count(*) from tree_v;
select * from tree_v;
\d+ tree_join_v
\dv *tree*
\d+ current_tree_vw 
\i a-count-affected-tree-versions.sql 
\i b-list-affected-tree-versions.sql 
\! ls
\i c-list-affected-tree-versions-with-count-of-missing-instances.sql 
select tree_version_id, draft_name, count(*)
  from tree_join_v
 where not exists (
    select null
      from instance
 where id = instance_id
       )
 group by tree_version_id, draft_name
 order by tree_version_id;
\w a-starting-point-counts.sql
\w b-one-version.sql
\d tree_version
\i b-one-version.sql 
\i b-one-version.sql 
\d tree_join_v
\i b-one-version.sql 
\x
\i b-one-version.sql 
\x
\i b-one-version.sql 
/x
;
\x
\i b-one-version.sql 
select count(*) from instance where id = 51359283'
;
';
select count(*) from instance where id = 51359283
;
select count(*) from tree_join_v where instance_id = 51359283;
\d+ tree_join_v
SELECT t.id AS tree_id,
    t.accepted_tree,
    t.config,
    t.current_tree_version_id,
    t.default_draft_tree_version_id,
    t.description_html,
    t.group_name,
    t.host_name,
    t.link_to_home_page,
    t.name,
    t.reference_id,
    tv.id AS tree_version_id,
    tv.draft_name,
    tv.log_entry,
    tv.previous_version_id,
    tv.published,
    tv.published_at,
    tv.published_by,
    tve.element_link,
    tve.depth,
    tve.name_path,
    tve.parent_id,
    tve.taxon_id,
    tve.taxon_link,
    tve.tree_element_id AS tree_element_id_fk,
    tve.tree_path,
    tve.tree_version_id AS tree_version_id_fk,
    tve.merge_conflict,
    te.id AS tree_element_id,
    te.display_html,
    te.excluded,
    te.instance_id,
    te.instance_link,
    te.name_element,
    te.name_id,
    te.name_link,
    te.previous_element_id,
    te.profile,
    te.rank,
    te.simple_name,
    te.source_element_link,
    te.source_shard,
    te.synonyms,
    te.synonyms_html
   FROM tree t
     JOIN tree_version tv ON t.id = tv.tree_id
     JOIN tree_version_element tve ON tv.id = tve.tree_version_id
     JOIN tree_element te ON tve.tree_element_id = te.id;
\s tree-join-v.sql
\w tree-join-v.sql
\i tree-join-v.sql
select count(*) from tree_join_v where instance_id = 51359283;
select count(*) from tree_join_v where is_current_version and instance_id = 51359283;
\d current_tree_vw 
select (*) from current_tree_vw where instance_id = 51359283;
\d tree
select tree_name from current_tree_vw where instance_id = 51359283;
select name from current_tree_vw where instance_id = 51359283;
select name from tree_join_v where is_current_version and instance_id = 51359283;
select name from tree_join_v where is_current_version and instance_id = 583601;
select name from tree_join_v where instance_id = 583601;
\i tree_join_v.sql 
\q
select x from tree_join_v limit 1;
select 2 from tree_join_v limit 1;
grant select on tree_join_v to webapni;
grant select on tree_join_v to webapni;
select 2 from tree_join_v limit 1;
\i tree_join_v.sql 
select 2 from tree_join_v limit 1;
\q
\t
\timing
select 'x';
\timing
select 'x';
\q
select 'x' from profile_text;
SELECT privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('newsletter')
        AND grantee = quote_ident('missy')
;
SELECT privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('webapni')
;
SELECT privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('nsl')
;
SELECT grantee, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('nsl')
;
SELECT grantee, table_name, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('nsl')
;
SELECT grantee, table_name, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('webapni')
;
\q
\d profile_text
\dt profile*
select count(*) from profile_item_type;
SELECT grantee, table_name, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_text')
        AND grantee = quote_ident('webapni')
;
select count(*) from profile_item_type;
select user;
grant select, insert, update, delete on profile_text to webapni;
\w grant-to-webapni-on-profile-text.sql
grant select, insert, update, delete on profile_item to webapni;
\w grant-to-webapni-on-profile-item.sql
\d profile_item_referene
\d profile_item_reference
grant select, insert, update, delete on profile_item_reference to webapni;
\w grant-to-webapni-on-profile-item-reference.sql
grant select, insert, update, delete on profile_item_annotation to webapni;
\w grant-to-webapni-on-profile-item-annotation.sql
\! ls
\! ls -l
\d profile*
\dt profile*
\dt prod*
\
\! ls -1
select * from profile_item_type ;
select id, name from profile_item_type ;
SELECT grantee, table_name, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_item_type')
        AND grantee = quote_ident('webapni')
;
SELECT grantee, table_name, privilege_type, is_grantable
    FROM information_schema.role_table_grants
    WHERE
        table_schema = quote_ident('public')
        AND table_name = quote_ident('profile_object_type')
        AND grantee = quote_ident('webapni')
;
\q
grant select, insert, update, delete on profile_item_annotation to webapni;
grant select, insert, update, delete on profile_item_reference to webapni;
grant select, insert, update, delete on profile_item to webapni;
grant select, insert, update, delete on profile_text to webapni;
\d tree_join_v
\d+ tree_join_v 
select count(*) from tree_join_v where is_current_version;
\q
grant select on tree_join_v to webafd;
select count(*) from tree_join_v where is_current_version;
\q
\d tree_join_v
\q
select host;
print 'x'
;
echo 'x';
\echo
\echo 'xxx'
\echo "%m"
\echo %m
\echo '%m'
select name from instance_type where synonym order by name;
select name, unsourced, deprecated from instance_type order by name;
select name, unsourced, deprecated from instance_type where not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and synonym order by name;
\d instance_type
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and not synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where deprecated and not unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where not deprecated and not unsourced and synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym, created_at from instance_type where citing and not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced and not synonym order by name;
select name, unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced and synonym order by name;
select name, citing,  unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced and synonym order by name;
select name, citing,  unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, citing:text,  unsourced:text, deprecated:text, synonym:text from instance_type where citing and not deprecated and not unsourced order by name;
\d instance_type
select name, citing,  unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, citing:string,  unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, citing::text,  unsourced, deprecated, synonym from instance_type where citing and not deprecated and not unsourced order by name;
select name, citing::text,  unsourced::text, deprecated::text, synonym::text from instance_type where citing and not deprecated and not unsourced order by name;
select name, case citing when true then 'TRUE' else 'false' end as citing,  unsourced::text, deprecated::text, synonym::text from instance_type where citing and not deprecated and not unsourced order by name;
select name, case citing when true then 'TRUE' else 'false' end as citing,  unsourced::text, deprecated::text, synonym::text from instance_type where citing and not deprecated and not unsourced order by name;
\w a-syns.sql
\! vi a-*
\w a-syns.sql
\! vi a-*
\i a-syns.sql 
\i b-citing-and-syn.sql 
\i c-citing-but-not-syn.sql 
\q
\i a-syns.sql 
\i b-citing-and-syn.sql 
\i c-citing-but-not-syn.sql 
\i a-syns.sql 
\i bool-function.sql 
select bool(true);
\i bool-function.sql 
select bool(true);
\i bool-function.sql 
select bool(true);
\i bool-function.sql 
\i a-syns.sql 
\i bool-function.sql 
\i a-syns.sql 
\i bool-function.sql 
drop function b;
\i a-syns.sql 
select bs(null);
select bs('');
select bs(true);
select bs(false);
select bs();
select bs(null);
\i bool-function.sql 
select bs(null);
select bs('null');
\i a-syns.sql 
\i d-relationship.sql 
\i e-relationship-not-citing.sql 
\q
\i e-relationship-not-citing.sql 
\i f-not-relationship-not-citing.sql 
\d instance_type
\i f-not-relationship-not-citing.sql 
\q
\i f-not-relationship-not-citing.sql 
\i g-not-standalone-not-relationship-not-citing.sql 
\i g-not-standalone-not-relationship-not-citing.sql 
\d tree_join_v
\d tree
t
exit
exit
\q
select user;
\d orchids
\dt orc*
\dt *
\dt *.or*
\d orchids
\d *.orchids
\dt *.or*
\dt *.orch*
\d orchidaceae
\d archive.orchidaceae
select count(*) from  archive.orchidaceae
;
\d orchids
\d archive.orchids
\d archive.orchids_names
\d loader_names
\dt load*
\d loader_name
\dt load*
\d loader_name_match
\d orchids_names
\d archive.orchids_names
\d archive.orchids_names
\d orchidaceae
\d archive.orchidaceae
drop table archive.orchidaceae;
drop table archive.orchidaceae;
select * from product;
\d profile*
\dt profile*
select * from profile_item_type;
select * from profile_object_type;
select * from profile_item_type;
select * from profile_object_type;
\d profile_object_type
select * from product;
\d product
select * from product;
select name from product;
\d pro*
\dt pro*
\d instance
\dv
\dv *tree*
\d tree
select * from product;
select name, description from product;
select name, description_html from product;
\q
select name, description_html from product;
\d product
select * from product;
\d product
\d author
\d namespae
\d namespace
\d instance_note
\d instance_type
\d name_type
\d product
select name, description_html, internal_notes from product order by name;
select name, description_html, b(is_name_index) is_name_index from product order by name;
select name, description_html, bool(is_name_index) is_name_index from product order by name;
select name, description_html, is_name_index:text from product order by name;
select name, description_html, is_name_index::text from product order by name;
select name, description_html, is_name_index::text, has_default_reference::text, referernce_id  from product order by name;
\d product
select name, description_html, is_name_index::text, has_default_reference::text, refererence_id  from product order by name;
select name, description_html, is_name_index::text, has_default_reference::text, reference_id  from product order by name;
select name, description_html, is_name_index::text, has_default_reference::text, reference_id, tree_id  from product order by name;
select name, description_html, is_current::text, is_name_index::text, has_default_reference::text, reference_id, tree_id  from product order by name;
select name, description_html from product order by name;
\dt
\d namespace
select * from namespace;
\d na,e
\d name
\d author
\d instance
\d reference
\d namespace
select ns.name, count(*) from namespace ns join author on author.namespace_id = ns.id group by ns.name;
select ns.name, count(*) from namespace ns join name on name.namespace_id = ns.id group by ns.name;
select ns.name refs, count(*) from namespace ns join reference on reference.namespace_id = ns.id group by ns.name;
select ns.name Authors, count(*) from namespace ns join author on author.namespace_id = ns.id group by ns.name;
select ns.name Names, count(*) from namespace ns join name on name.namespace_id = ns.id group by ns.name;
select ns.name refs, count(*) from namespace ns join reference on reference.namespace_id = ns.id group by ns.name;
select ns.name instances, count(*) from namespace ns join instance on instance.namespace_id = ns.id group by ns.name;
select ns.name Authors, count(*) from namespace ns join author on author.namespace_id = ns.id group by ns.name;
\w author-ns.sql
\! ls
select ns.name Names, count(*) from namespace ns join name on name.namespace_id = ns.id group by ns.name;
\w names-ns.sql
select ns.name instances, count(*) from namespace ns join instance on instance.namespace_id = ns.id group by ns.name;
\w instances-ns.sql
select ns.name refs, count(*) from namespace ns join reference on reference.namespace_id = ns.id group by ns.name;
\w refs-ns.sql
\q
select * from namespace order by name;
\w namespace.sql
\q
select database;
\?
select current_database();
SELECT *
FROM pg_settings
WHERE name = 'port';
CREATE EXTENSION hostname;
SELECT *
FROM pg_settings
WHERE name = 'host';
SELECT *
FROM pg_settings
;
SELECT name FROM pg_settings
order by name;
SELECT name FROM pg_settings
where name like '%host%' order by name;
SELECT *
FROM pg_settings
WHERE name = 'log_hostname';
SELECT *
FROM pg_settings
WHERE name = 'port';
select * from product;
select name from product;
\dt
select * from users;
\d users
\d namespace
select * from namespace;
\! pwd
\d author
\d name
\! ls
\i names-ns.sql 
select * from namespace;
\d product
select name from product;
select * from namespace ;
select name from product;
select * from namespace ;
select * from namespace ;
select * from namespace ;
\i names-ns.sql 
\dt *.*
\dt loader.*
exot
exit
exit
\q
\d tree
\i a-create-editor-role.sql 
\d editor_role
select * from users;
\i b-create-namespace-user-role.sql 
drop table editor_role ;
drop table name_space_user_role ;
drop table editor_role ;
\i a-create-editor-role.sql 
\d editor_role
drop table editor_role;
\i a-create-editor-role.sql 
\?
\dx
create extension if not exists citext;
\i a-create-editor-role.sql 
;
\d editor_role
\i a-create-editor-role.sql 
\dt
\dt *role*
\d editor_role
select * from editor_role;
drop table editor_role ;
\dt *role*
\i g-drops.sql 
\i a
\i a-create-name-edit-role.sql 
\i b-create-name-space-user-edit-role.sql 
\i c-add-name-edit-roles.sql 
\i d-create-tree-edit-role.sql 
\i e-create-tree-user-edit-role.sql 
\i f-add-tree-edit-roles.sql 
\i g-drops.sql 
\i h-describe.sql 
\i a-create-name-edit-role.sql 
\i b-create-name-space-user-edit-role.sql 
\i c-add-name-edit-roles.sql 
\i h-describe.sql 
\d namespace
select * from namespace;
\d namespace
insert into namespace (name) value ('Lichen');
insert into namespace (name) values ('Lichen');
insert into namespace (name) values ('LIchen');
select * from namespace;
delete from namespace where name != 'APNI';
select * from namespace;
\! pwd
\i a-create-owner.sql 
\i a1-add-owners.sql 
select * from owners;
select * from owner;
\i x-describe.sql 
\i y-list.sql 
\d owner*
select * from name_edit_role ;
\i b-create-name-edit-role.sql 
select * from name_edit_role;
\i c-create-owner-user-edit-role.sql 
\i x-describe.sql 
\i d-add-name-edit-roles.sql 
\i e-create-tree-edit-role.sql 
\i x-describe.sql 
\d tree*
\dt tree*
\i x-describe.sql 
\dt tree*
\i z-drops.sql 
\i x-describe.sql 
\d tree_edit_role
\i z-drops.sql 
\i x-describe.sql 
\i zz-script.sql 
\dt owner*
\dt *role*
\dt owner*role*
\dt owner*role* user*role*
\dt+ owner*role* user*role*
\dt++ owner*role* user*role*
\dt
\i w-list.sql 
\dt owner*
\i w-list.sql 
\i x-describe.sql 
drop index tree_edit_role_lower_idx1;
drop index tree_edit_role_lower_idx2;
drop index name_edit_role_lower_idx1;
drop index name_edit_role_lower_idx2;
\i zz-script.sql 
\i w-list.sql 
create extension citext;
\?
\du
\du
\dt
\dt batch*
alter table batch_reviewer public.batch_reviewer set schema loader;
alter table public.batch_reviewer set schema loader;
\dt batch*
alter table public.batch_reviewer set schema loader;
\dt batch*
\dt batch*
alter table public.batch_reviewer set schema loader;
\dt batch*
\dt
\dt batch*
\dt
\dt
\d nsl_simple_name_export
\d glossary
select * from glossary;
select term from glossary;
select term_name from glossary;
\dt
\d xpg
select * from xpg;
\d event_record
select * from event_record ;
\dt
\d current_tve
\d batch_review;
select * from batch_review;
select name from users;
select name, citing, relationship from instance_type where citing;
select name, citing, relationship from instance_type where citing order by name;
select name, citing, relationship from instance_type where citing != relationship order by name;
select name, citing, relationship, unsourced from instance_type where citing != relationship order by name;
select name, citing, relationship, unsourced from instance_type where order by name;
select name, citing, relationship, unsourced from instance_type order by name;
select name, citing, relationship, unsourced from instance_type where unsourced order by name;
\i zz-script.sql 
\d owner
drop index owner_lower_idx;
drop index owner_lower_idx1;
drop index owner_lower_idx2;
drop index owner_lower_idx3;
\d owner
drop table owner;
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i w-list.sql 
\i a-create-owner.sql 
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i a-create-owner.sql 
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i w-list.sql 
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i y-select.sql 
\i zz-script.sql 
\i w-list.sql 
\i x-describe.sql 
\i z-drops.sql 
\i w-list.sql 
\d name_edit_role
drop index name_edit_role_lower_idx;
\i w-list.sql 
\i z-drops.sql 
\i zz-script.sql 
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i z-drops.sql 
\i w-list.sql 
\i z-drops.sql 
\i w-list.sql 
\i zz-script.sql 
\i w-list.sql 
\i x-describe.sql 
\d owner_name_edit_role_user
select * from name_edit_role;
\d owner_name_edit_role_user
\i h-add-owner-name-edit-role-users.sql 
\d owner_name_edit_role_user
select owner.name from owner_name_edit_role_user oneru join owner o on oneru.owner_id = o.id;
select owner.name from owner_name_edit_role_user oneru join owner on oneru.owner_id = owner.id;
select owner.name, u.name from owner_name_edit_role_user oneru join owner on oneru.owner_id = owner.id join users u on oneru.user_id = u.id;
select owner.name owner, u.name user, role.name role from owner_name_edit_role_user oneru join owner on oneru.owner_id = owner.id join users u on oneru.user_id = u.id join name_edit_role ner on oneru.name_edit_role_id = ner.id;
select owner.name owner, u.name user, role.name role from owner_name_edit_role_user oneru join owner on oneru.owner_id = owner.id join users u on oneru.user_id = u.id join name_edit_role role on oneru.name_edit_role_id = role.id;
\w owner_name_edit_role_user_v.sql
\d owner_name_edit_role_user
\i zz-script.sql 
\i w-list.sql 
\i x-describe.sql 
\i y-select.sql 
\i zz-script.sql 
\i y-select.sql 
\i zz-script.sql 
\i w-list.sql 
\i y-select.sql 
select instance_type where unsourced;
select * from instance_type where unsourced;
select name from instance_type where unsourced;
select name from instance_type where unsourced order by name;
select id from instance_type where unsourced;
select count(*) from instance where instance_type in (select id from instance_type where unsourced);
select count(*) from instance where instance_type_id in (select id from instance_type where unsourced);
select id, cites_id, cited_by_id from instance where instance_type_id in (select id from instance_type where unsourced);
t
exit
\q
select name, standalone, unsourced where unsourced order by name;
select name, standalone, unsourced from instance_type where unsourced order by name;
select cited_by_id,citing_id from instance where instance_type_id in (select id from instance_type where standalone); 
\d instance
select cited_by_id,cites_id from instance where instance_type_id in (select id from instance_type where standalone); 
select cited_by_id,cites_id from instance where instance_type_id in (select id from instance_type where standalone) group by cited_by_id, cites_id; 
select cited_by_id,cites_id from instance where instance_type_id in (select id from instance_type where standalone) group by cited_by_id, cites_id; 
select count(*) from instance where cited_by_id is null and instance_type_id in (select id from instance_type where relationship); 
select count(*) from instance where cited_by_id is null and instance_type_id in (select id from instance_type where citing); 
select count(*) from instance where cites_id is null and instance_type_id in (select id from instance_type where relationship); 
select count(*) from instance where cites_id is null and instance_type_id in (select id from instance_type where citing); 
select count(*) from instance where cites_id is null and instance_type_id in (select id from instance_type where unsourced); 
\d instance
\d instance_type
select t.name, count(*) from instance i join instance_type t on i.instance_type_id = t.id where i.cited_by_id is not null and i.cites_id is null; 
select t.name, count(*) from instance i join instance_type t on i.instance_type_id = t.id where i.cited_by_id is not null and i.cites_id is null group by t.name; 
select t.name, standalone, relationship, citing, unsourced, count(*) from instance i join instance_type t on i.instance_type_id = t.id where i.cited_by_id is not null and i.cites_id is null group by t.name, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id when not null then 'not null' else 'null' end, standalone, relationship, citing, unsourced, count(*) from instance i join instance_type t on i.instance_type_id = t.id where i.cited_by_id is not null and i.cites_id is null group by t.name, case i.cited_by_id when not null then 'not null' else 'null' end, standalone, relationship, citing, unsourced; 
select case 'x' when 'x' then 'xxxx' end;
select t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced, count(*) from instance i join instance_type t on i.instance_type_id = t.id where i.cited_by_id is not null and i.cites_id is null group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id when null then 'null' else 'not null' end cited_by_id, standalone, relationship, citing, unsourced, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id when null then 'null' else 'not null' end cited_by_id, standalone::text, relationship, citing, unsourced, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id when null then 'null' else 'not null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id::text when null then 'null' else 'not null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cited_by_id when null then 'null' else 'not null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cited_by_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cites_id when null then 'null' else 'not null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cites_id when null then 'null' else 'not null' end, standalone, relationship, citing, unsourced; 
select t.name, case i.cites_id when > 0 then 'not null' else 'null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case i.cites_id when > 0  then 'not null' else 'null' end, standalone, relationship, citing, unsourced; 
select t.name, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, standalone, relationship, citing, unsourced; 
select t.name, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, standalone, relationship, citing, unsourced order by 1,2; 
select t.name, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, standalone::text, relationship::text, citing::text, unsourced::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, standalone, relationship, citing, unsourced order by 1,2; 
select t.name, unsourced::text, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, standalone::text, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, standalone, relationship, citing, unsourced order by 1,2; 
select t.name, unsourced::text, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, relationship, citing, unsourced order by 1,2; 
select unsourced:text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, relationship, citing, unsourced order by 1,2; 
select unsourced::text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, relationship, citing, unsourced order by 1,2; 
select unsourced::text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cites_id, case when i.cited_by_id > 0 then 'not null', else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, when i.cited_by_id > 0 then 'not null', else 'null' end, relationship, citing, unsourced order by 1,2; 
select unsourced::text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cites_id, case when i.cited_by_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, when i.cited_by_id > 0 then 'not null', else 'null' end, relationship, citing, unsourced order by 1,2; 
select unsourced::text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cites_id, case when i.cited_by_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, case when i.cited_by_id > 0 then 'not null', else 'null' end, relationship, citing, unsourced order by 1,2; 
\! pwd
select unsourced::text, t.name, case when i.cites_id > 0 then 'not null' else 'null' end cites_id, case when i.cited_by_id > 0 then 'not null' else 'null' end cited_by_id, relationship::text, citing::text, count(*) from instance i join instance_type t on i.instance_type_id = t.id where citing or relationship group by t.name, case when i.cites_id > 0  then 'not null' else 'null' end, case when i.cited_by_id > 0 then 'not null' else 'null' end, relationship, citing, unsourced order by 1,2; 
\w x.sql
select count(*) from instance_type where relationship != citing;
\d instance
select * from instance_type where citing != relationship;
\d instance_type
select * from instance_type where citing != relationship;
\d product
exi
\q
select * from instance_type where citing != relationship;
select name from instance_type where citing != relationship;
\d product
select * from product order by name;
\x
select * from product order by name;
select name, reference_id, tree_id from product order by name;
select name, reference_id, tree_id from product order by name;
select citation from reference where id = 51793021;
\d product
select name, reference_id, tree_id from product order by name;
\d loader_name
\d instance_type
\i zz-script.sql 
\i zz-drops.sql 
\i z-drops.sql 
select * from product;
\i zz-script.sql 
\i zz-describe.sql 
\i zz-drops.sql 
\i zz-script.sql 
select * from name_edit_role;
\i zz-drops.sql 
\i zz-script.sql 
\i zz-describe.sql 
select * from name_edit_role;
publishing
;
insert into name_edit_role (name, description) values ('publisher', 'A publishing role');
insert into name_edit_role (name, description) values ('Publisher', 'A publishing role');
\i zz-list-data.sql 
\d name_edit_role
\d nAme_edit_role
select * from name_edit_role;
\d product
\d users
\! pwd
\! ls
\! ls -1
\i zz-drops.sql 
\i zz-describe.sql 
\i zz-list-data.sql 
\i zz-script.sql 
\i zz-describe.sql 
\i zz-list-data.sql 
\i h-add-users.sql 
\d product
select * from product;
\x
select * from product;
select name from product;
select name, tree_id, reference_id from product;
select name, tree_id, reference_id from product;
\d product
\d product
exi
\q
\l
rename database nsl_dev to nsl_dev_retired_12_feb;
alter database nsl_dev rename to nsl_dev_retired_12_feb;
alter database nsl_dev rename to nsl_dev_retired_12_feb;
alter database nsl_dev rename to nsl_dev_retired_12_feb;
\l
alter database nsl_test_11_feb rename to nsl_dev;
\dt
\d product
\d profile_items
\d profile_item
\d product_item
\d product_item_config
vacuum full verbose analyze;
select * from product;
select * from product;
select * from profile_item_config;
\dt prof*.*
\dt prof*
select * from profile_item_type;
\i zz-drops.sql 
\i zz-drops.sql 
\i zz-script.sql 
\i zz-drops.sql 
\i zz-script.sql 
create extension citext;
\i zz-script.sql 
\i zz-list-data.sql 
\i zz-drops.sql 
\i zz-script.sql 
\i zz-describe.sql 
\i zz-list-data.sql 
select * from tree;
select * from userse;
select * from users;
select * from users order by name;
begin;
select * from users where name = 'jreviewer';
delete from users where name = 'jreviewer';
select * from users where name = 'jreviewer';
commit;
begin;
select * from users where name = 'jreviewer';
delete from users where name = 'jreviewer';
select * from users where name = 'jreviewer';
select * from users order by name;
commit;
select * from users;
select * from users where name = 'jreviewer';
delete from users where name = 'jreviewer';
\dt *.*
\dt *.load*
select * from product;
\?
\dx
create extension citext;
\i product-etc-data-script-from-ec.sql 
\i zz-list-data.sql 
\d product
\i h-add-user-product-roles.sql 

add L Pedley?

i


insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher'),
  (select id from users where name = 'pkodela')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher'),
  (select id from users where name = 'pkodela')
);
select id from product_role_type where name = 'publisher';

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'pkodela')
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher'),
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'pkodela'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher')
);
\i h-add-users.sql 

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'pkodela'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'pkodela'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'treebuilder')
);

insert into user_product_role (user_id, product_id, name_edit_role_id)
values (
  (select id from users where name = 'amonro'),
  (select id from product where name = upper('apc')),
  (select id from product_role_type where name = 'treebuilder')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'amonro'),
  (select id from product where name = upper('apc')),
  (select id from product_role_type where name = 'treebuilder')
);
\i zz-list-data.sql 
print 'prod'
;
echo 'prod'
;
\echo 'sss'
\d user_product_role
select user.name, product.name, product_role_type.name
from user_product_role 
     join user
     on user_product_role.user_id = user.id
     join product 
     on user_product_role.product_id = product.id
     join product_role_type on
     user_product_role.product_role_type_id = product_role_type.id
order by 1,2,3;
\w m-create-join-view.sql
\i m-create-join-view.sql
insert into product_role_type (name, description) values ('editor', 'An unrestricted editing role type');

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where name = 'amonro'),
  (select id from product where name = upper('apni')),
  (select id from product_role_type where name = 'editor')
);
\i m-create-join-view.sql 
\d product
\i m-create-join-view.sql 
\d user_product_role_v
\i zz-list-data.sql 
\i zz-drops.sql 
\i zz-script.sql 
\i zz-list-data.sql 
\d product
\i zz-list-data.sql 
\dt *.load*
\i zz-drops.sql 
\i zz-script.sql 
\i zz-list-data.sql 
\d product_role_type
select * from product;
\i zz-list-data.sql 
\! ls
\! ls -l
\i zz-drops.sql 
\i zz-list-data.sql 
\i zz-script.sql 
\i zz-list-data.sql 
\d users
\d product
alter table product add column is_name_index boolean not null default false;
\d user_procuct_role_v
\d user_procuct_role_v
\d user_product_role_v 
select user, product, role from user_product_role_v;
select   *  user_product_role_v;
select   *  from user_product_role_v;
select user;
drop view user_product_role_v ;
\! pwd
select * from users;
\i m-create-join-view.sql 
select user, product, role from user_product_role_v;
select user_name, product, role from user_product_role_v;
\d users
select * from users;
delete from users where name = 'gc';
select * from users;
\d users
alter table users rename name to user_name;
\d users
\! pwd
\w rename-user-name-to-user-user-name.sql
\dt
\dt
\dt
alter table users alter user_name citext;
alter table users alter user_name type citext;
\dv+ batch_stack_v
\d+ batch_stack_v
\i batch-stack-v.sql 
\i batch_stack_v.sql 
\d batch_stack_v
\dt
\dt
\q
\dt
\dt
SELECT "loader_batch".* FROM "loader_batch" INNER JOIN "batch_review" ON "batch_review"."loader_batch_id" = "loader_batch"."id" INNER JOIN "batch_reviewer" ON "batch_reviewer"."batch_review_id" = "batch_review"."id" INNER JOIN "users" "user" ON "user"."id" = "batch_reviewer"."user_id" WHERE "user"."user_name" = $1 ORDER BY user_name;
SELECT "loader_batch".* FROM "loader_batch" INNER JOIN "batch_review" ON "batch_review"."loader_batch_id" = "loader_batch"."id" INNER JOIN "batch_reviewer" ON "batch_reviewer"."batch_review_id" = "batch_review"."id" INNER JOIN "users" "user" ON "user"."id" = "batch_reviewer"."user_id" WHERE "user"."user_name" = 'gc' ORDER BY user_name;
\i batch_stack_v.sql 
\d batch_review
\q
\d+ batch_stack_v
\w bsv-test.sql
\! ls
\! pwd
\i bsv-test.sql 
\d resource
\d site
\d reference
\d instance
\d name
\d instance_resource
\d instance*
\dt instance*
ls 
;
\dt *resource*
\dt instance_resources
\d instance_resources
select * from resource;
select count(*) from resource;
\dt *obj*
\dt *res*
select count(*) from instance_resources;
select count(*) from name_resources;
\d instance_resources
\d name_resources
\d resource
\d users
\d users
\d users
\d users
\q
\d product
alter table users rename name to user_name;
\i batch-stack-v.sql 
grant select on batch_stack_v to webapni;
\d users
\d users
\dt
create table users (
  id bigint not null default  nextval('nsl_global_seq'::regclass) primary key,
  user_name varchar(30) not null,
  given_name varchar(60),
  family_name varchar(60) not null,
  lock_version bigint not null default 0,
  created_at timestamp with time zone not null default now(),
  created_by character varying(50)    not null default user,
  updated_at timestamp with time zone not null default now(),
  updated_by character varying(50)    not null default user,
  unique (user_name)
)
;
\dt
\dt
\dt pr*
\dt
\dt
\d product_role_type

CREATE TABLE public.xproduct_role_type (
    id bigint DEFAULT nextval('public.nsl_global_seq'::regclass) NOT NULL,
    name citext not null,
    description  text                     not null default 'Please describe this product role type',
    deprecated   boolean                  not null default false,
    lock_version bigint                   not null default 0,
    created_at   timestamp with time zone not null default now(),
    created_by   character varying(50)    not null default USER,
    updated_at   timestamp with time zone not null default now(),
    updated_by   character varying(50)    not null default USER
);
drop table xproduct_role_type ;
\dt
\dt prod*
\dt
\d product*
\dt product*
\d product*
\dt product*
\dt
\dt
\q
\dt
\i rename-user-name-to-user-user-name.sql 
\i batch-stack-v.sql 
\q
\d users
\i users.sql 
create extension citext;
\i users.sql 
\d name
select count(*) from name where uri is not null;
select count(*) from name where uri is not null;
select id, uri from name where uri is not null limit 1;
begin;
select id, uri from name where uri is null limit 1;
select 'x' where 'x'::citext = 'x'::text;
select 'x' val where 'x'::citext = 'x'::text;
begin;
select id, uri from name where uri is not null limit 1;
select id, uri from name where uri is null limit 1;
rollback;
end;
begin;
select id, uri from name where uri is not null limit 2;
update name set uri = upper('name/apni/51282878') where id = 51412894;
select id, uri from name where id in (51282878,51412894);
rollback;
begin;
update name set uri = 'name/apni/51282878'  where id = 51412894;
\i users.sql 
drop table users;
\i users.sql 
grant select on users to webmoss;
\d users
\i users.sql 
\d users
grant select on users to webalgae;
\d users
\dt
\
\q
\i users.sql 
grant select, insert, update, delete on users to weblichen;
\d users
grant select, insert, update, delete on users to webalgae;
\d users
\i users.sql 
grant select, insert, update, delete on users to webfungi;
\d users
grant select, insert, update, delete on users to webapni;
\d users
\i users.sql 
grant select, insert, update, delete on users to webalgae;
\d users
\i users.sql 
grant select, insert, update, delete on users to webfungi;
\d users
\i users.sql 
grant select, insert, update, delete on users to weblichen;
\d users
\i users.sql 
grant select, insert, update, delete on users to webmoss;
\dt
\d product_role_type
\i product_role_type.sql 
\d user_product_role
\i user_product_role.sql 
grant select on product_role_type to webapni;
grant select, insert, update, delete on user_product_role to webapni;
\dt
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to webalgae;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to webalgae;
\dt
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to webapni;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to webapni;
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to webalgae;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to webalgae;
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to webfungi;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to webfungi;
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to weblichen;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to weblichen;
\d product_role_type
\i product_role_type.sql 
grant select on product_role_type to webmoss;
\d user_product_role
\i user_product_role.sql 
grant select, insert, update, delete on user_product_role to webmoss;
\df text2ltree
\df+ text2ltree
\d+ text2ltree
\df+ text2ltree
\sf+ text2ltree
CREATE OR REPLACE FUNCTION public.text2ltree(text)
         RETURNS ltree
         LANGUAGE c
         IMMUTABLE PARALLEL SAFE STRICT
       AS '$libdir/ltree', $function$text2ltree$function$
;
\df operator
\d product_role_type
\dt
\dt archive.*
select * from product;
select name from product;
select * from product_role_type;
\i d-add-product-role-types.sql 
\i h-add-users.sql 
\i j-add-user-product-roles.sql 
\i m-create-join-view.sql 
select * from user_product_role_v;

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdecio'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher')
);
select * from user_product_role_v;

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gclarke'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'publisher')
);
select * from user_product_role_v;

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gclarke'),
  (select id from product where name = upper('apni')),
  (select id from product_role_type where name = 'publisher')
);
insert into users (user_name, given_name, family_name) values ('gdfoa', 'Gerda', 'FOA');
insert into users (user_name, given_name, family_name) values ('gdedit', 'Gerda', 'Edit');
select * from users;
select * from product;
select name from product;
select name from tree;
select * from user_product_role_v ;
select user_name, product, role from user_product_role_v ;
i
exit;
\q
\dt archive*
\dt archive.*
select count(*) from archive.loader_batch_raw_names_26_sep_2023 where simple_name = 'Caladenia vulgata';
\d loader_batch_raw_names_26_sep_2023
\d archive.loader_batch_raw_names_26_sep_2023
select count(*) from archive.loader_batch_raw_names_26_sep_2023 where taxon = 'Caladenia vulgata';
select count(*) from archive.loader_batch_raw_names_26_sep_2023 where taxon is not null;
select count(*) from archive.loader_batch_raw_names_26_sep_2023 ;
select count(*) from loader_name where simple_name = 'Caladenia vulgata' ;
select loader_batch_id from loader_name where simple_name = 'Caladenia vulgata' ;
select * from loader_batch where id = 51715536;
\dt
select * from loader_batch where id = 51715536;
\dt archive.*
select count(*) from archive.loader_batch_raw_names_20_mar_2023 where taxon = 'Caladenia vulgata';
select * from archive.loader_batch_raw_names_20_mar_2023 where taxon = 'Caladenia vulgata';
select id, record_type, parent_id, taxon, taxon_full from archive.loader_batch_raw_names_20_mar_2023 where taxon = 'Caladenia vulgata';
select count(*) from archive.loader_batch_raw_names_20_mar_2023 where id in (5879,5891);
select id, record_type, parent_id, taxon, taxon_full from archive.loader_batch_raw_names_20_mar_2023 where taxon = 'Caladenia vulgata' or in (5879,5891);
select id, record_type, parent_id, taxon, taxon_full from archive.loader_batch_raw_names_20_mar_2023 where taxon = 'Caladenia vulgata' or id in (5879,5891);
\w
\w s.sql
\e s.sql
select id, record_type, parent_id, taxon, taxon_full
  from archive.loader_batch_raw_names_20_mar_2023
 where taxon = 'Caladenia vulgata'
    or id in (5879,5891);
\! cat s.sql
select id, record_type, parent_id, taxon, taxon_full
  from archive.loader_batch_raw_names_20_mar_2023
 where taxon = 'Caladenia vulgata'
    or id in (5879,5891);
\d loader_name
select id, record_type, parent_id, simple_name, raw_parent_id
  from loader_name
 where simple_name = 'Caladenia vulgata'
 ;
select id, record_type, parent_id, simple_name, parent_raw_id
  from loader_name
 where simple_name = 'Caladenia vulgata'
 ;
select id, record_type, parent_id, simple_name, parent_raw_id
  from loader_name
 where simple_name = 'Caladenia incensum'
 ;
select id, record_type, parent_id, simple_name, parent_raw_id
  from loader_name
 where simple_name = 'Caladenia varians'
 ;
select count(*) from loader_name where simple_name = 'Caladenia vulgata' ;
select simple_name, created_on from loader_name where simple_name = 'Caladenia vulgata' ;
select simple_name, created_at from loader_name where simple_name = 'Caladenia vulgata' ;
select * from user_product_role_v;
select * from product_role_type ;
select * from product_role_type ;
select * from user_product_role
;
select * from user_product_role_v
;
select user_name, product, role, tree, is_name_index  from user_product_role_v
;
select user_name, product, role, tree, is_name_index  from user_product_role_v
;
select * from product_role_type;
select * from user_product_role_v;
select * from user_product_role_v;
select user_name, product, role, tree, is_name_index from user_product_role_v;
begin;
delete from user_asdfsafads;
rollback;
begin;
select user_name, product, role, tree, is_name_index from user_product_role_v;
delete from user_product_role;
select user_name, product, role, tree, is_name_index from user_product_role_v;
delete from product_role_type ;
insert into product_role_type (name, description) values ('draft-editor', 'Can edit a draft of any product resource');
insert into product_role_type (name, description) values ('taxonomy-editor', 'Can edit any taxonomy (e.g name, instance) of a product');
insert into product_role_type (name, description) values ('draft-profile-editor', 'Can edit a draft profile data of a product');
insert into product_role_type (name, description) values ('profile-editor', 'Can edit a published profile of a product');
insert into product_role_type (name, description) values ('tree-publisher', 'Can manage a tree version of a product');
select from product_role_type ;
select * from product_role_type ;
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'draft-editor')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'draft-profile-editor')
);


insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gd'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'profile-editor')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gd'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'tree-publisher')
);


insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdedit'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'tree-publisher')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdedit'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'taxonomy-editor')
);
select from product_role_type ;
rollback;
begin;
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'draft-editor')
);
rollback;
select * from users;
select * from produt;
select * from product;
select name from product;
\d user_product_role;
begin;
delete from user_product_role;
delete from product_role_type ;
insert into product_role_type (name, description) values ('draft-editor', 'Can edit a draft of any product resource');
insert into product_role_type (name, description) values ('taxonomy-editor', 'Can edit any taxonomy (e.g name, instance) of a product');
insert into product_role_type (name, description) values ('draft-profile-editor', 'Can edit a draft profile data of a product');
insert into product_role_type (name, description) values ('profile-editor', 'Can edit a published profile of a product');
insert into product_role_type (name, description) values ('tree-publisher', 'Can manage a tree version of a product');
select * from product_role_type;
select id from users where user_name = 'gdfoa';
select id from product where name = upper('foa');
select id from product_role_type where name = 'draft-editor';
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'draft-editor')
);
select * from user_product_role_v;
select user_name from users order by 1;
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'draft-profile-editor')
);
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdecio'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'profile-editor')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdecio'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'tree-publisher')
);
insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdedit'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'tree-publisher')
);

insert into user_product_role (user_id, product_id, product_role_type_id)
values (
  (select id from users where user_name = 'gdedit'),
  (select id from product where name = upper('foa')),
  (select id from product_role_type where name = 'taxonomy-editor')
);
select * from user_product_role_v;
commit;
select * from product_role_type ;
select * from users;
select * from users where user_name = 'cgardner';
select * from users where user_name = 'jhooker';
select * from users where user_name = 'cgardner';
select * from users where user_name = 'jhooker';
insert into users (user_name, given_name, family_name) values ('cgardner', 'Charles', 'Gardner');
\w cgardner.sql
insert into users (user_name, given_name, family_name) values ('jhooker', 'Joseph', 'Hooker');
\w jhooker.sql
\i cgardner.sql
insert into users (name, given_name, family_name) values ('jhooker', 'Joseph', 'Hooker');
\i cgardner.sql
insert into users (name, given_name, family_name) values ('cgardner', 'Charles', 'Gardner');
select * from users order by name;
\d product*
\dt product*
\d product_context
select * from product_context;
\dt context
\dt *context*
\d product_context
select id, context_id, product_id, description from product_context;
\d user_product_role_v
select * from context_v;
\dt *comm*
\d comment
select * from product_context
;
\d product_context
\d user_product_context
select * from context_v;
\d+ context_v
\d user_product_context
\d product_context
select * from product_context;
select id, context_id, product_id, description from product_context order by context_id;
\d+ context_v
select * from context_v;
select id, context_id, product_id, description from product_context where context_id != 1order by context_id;
select id, context_id, product_id, description from product_context where context_id != 1 order by context_id;
\d+ context_v
select * from context_v where context_id != 1;
select id, context_id, product_id, description from product_context where context_id != 1 order by context_id;
select * from context_v where context_id != 1;
\d user_product_context
select * from user_product_context;
select user_id, context_id, is_default from user_product_context;
select upc.user_id, upc.context_id, upc.is_default from user_product_context upc;
select upc.user_id, upc.context_id, upc.is_default:text from user_product_context upc;
select upc.user_id, upc.context_id, upc.is_default::text from user_product_context upc;
select upc.user_id, upc.context_id, case upc.is_default when true then 'true' else 'false' end is_default from user_product_context upc;
select upc.user_id, upc.context_id, case upc.is_default when true then 'true' else 'f' end is_default from user_product_context upc;
\w create_user_product_context_v.sql
\i create_user_product_context_v.sql
select * from user_product_role_v;
\i create_user_product_context_v.sql
select * from user_product_context_v;
\i create_user_product_context_role_v.sql 
\d user_product_context;
\i create_user_product_context_role_v.sql 
\d org
select * from org;
\i create_user_product_context_role_v.sql 
select * from user_product_context_v;
\d+ user_product_context_v
select * from user_product_context_role_v;
\! ls
\i create_user_product_context_role_v.sql
select * from user_product_role_v;
select user_name, product, role from user_product_role_v;
select user_name, product, role from user_product_role_v order by 1,2,3;
\i create_user_product_context_role_v.sql
select * from org;
select * from product_context ;
select id, context_id, product_id, description from product_context ;
select * from context_v;
select * from product_role_type;
select id,name, description from product_role_type order by name;
\i create-une-herb-org.sql 
select * from org;
update org set can_vote = true where abbrev = 'NE';
select * from org;
\i create-une-herb-org.sql 
\?
\dx
\dx
\i create-une-herb-org-can-vote.sql 
select * from org;
select * from org;
\d org
select * from context_v;
\d batch_review
\d user_product_role
select * from loader_name where id = 51792542;
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name where id = 51792542;
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join loader_batch lb on ln.loader_batch_id = lb.id where ln.id = 51792542;
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join instance i on ln.loader_from_instance_id = l.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join instance i on ln.loaded_from_instance_id = l.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join instance i on ln.loaded_from_instance_id = i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, loaded_from_instance_id from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance i on ln.loaded_from_instance_id = i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
\d loader_name_match
select ln.id, ln.record_type, ln.simple_name, lnm.instance_id match_instance from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance i on ln.loaded_from_instance_id = i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, from_i.id, lnm.instance_id match_instance from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance from_i on ln.loaded_from_instance_id = from_i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, from_i.id from_i, lnm.instance_id match_instance from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance from_i on ln.loaded_from_instance_id = from_i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, from_i.id from_i, from_i.cited_id from_i_cited_id, lnm.instance_id match_instance from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance from_i on ln.loaded_from_instance_id = from_i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
select ln.id, ln.record_type, ln.simple_name, from_i.id from_i, from_i.cites_id from_i_cites_id, lnm.instance_id match_instance from loader_name ln join loader_name_match lnm on ln.id = lnm.loader_name_id join instance from_i on ln.loaded_from_instance_id = from_i.id join loader_batch lb on ln.loader_batch_id = lb.id where ln.id in (51792542, 51789622);
\w a-test-cases.sql
\i a-test-cases.sql 
\w b-test-cases-with-filter.sql
\i b-test-cases-with-filter.sql
\i c-all-cases-via-filter.sql 
\i b-test-cases-with-filter.sql 
\i c-all-cases-via-filter.sql 
\i d-count-misapps-in-batches.sql 
\d loader_batch
\i d-count-misapps-in-batches.sql 
\q
\i d-count-misapps-in-batches.sql 
\i c-all-cases-via-filter.sql 
select from loader_name where id = 51772556;
select * from loader_name where id = 51772556;
\i d-count-misapps-in-batches.sql 
\i e-extra-cases.sql 
\i select * from loader_name where id = 51772556l;
select * from loader_name where id = 51772556l;
select * from loader_name where id = 1;
select * from loader_name where id = 517725566;
select * from loader_name where id = 51772556;
select * from loader_name_match where loader_name_id = 51772556;
select * from loader_name_match where loader_name_id = 51772556;
begin;
delete from loader_name_match where loader_name_id = 51772556;
commit;
select * from loader_name_match where loader_name_id = 51772556;
\w a-select.sql
delete from loader_name_match where loader_name_id = 51772556;
\w b-delete-match.sql
\i c-all-cases-via-filter.sql 
select * from loader_name_match where loader_name_id = 51792542;
\w f-select-record-to-delete.sql
begin;
delete from loader_name_match where loader_name_id = 51792542;
commit;
\i f-select-record-to-delete.sql 
delete from loader_name_match where loader_name_id = 51792542;
\w g-delete-match.sql
\i a-select.sql 
begin;
\i b-delete-match.sql 
commit;
\i f-select-record-to-delete.sql 
\i g-delete-match.sql 
\i f-select-record-to-delete.sql 
\i g-delete-match.sql 
\i f-select-record-to-delete.sql 
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ((lower(simple_name) like '%%')
        or exists (
        select null
          from loader_name parent
        where parent.id         = loader_name.parent_id
       and lower(parent.simple_name) like '%%')
        or exists (
        select null
          from loader_name child
        where child.parent_id   = loader_name.id
       and lower(child.simple_name) like '%%')
        or exists (
        select null
          from loader_name sibling
        where sibling.parent_id = loader_name.parent_id
       and lower(sibling.simple_name) like '%%')) ORDER BY sort_key, seq;
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ((lower(simple_name) like '%%')
        or exists (
        select null
          from loader_name parent
        where parent.id         = loader_name.parent_id
       and lower(parent.simple_name) like '%%')
        or exists (
        select null
          from loader_name child
        where child.parent_id   = loader_name.id
       and lower(child.simple_name) like '%%')
        or exists (
        select null
          from loader_name sibling
        where sibling.parent_id = loader_name.parent_id
       and lower(sibling.simple_name) like '%%')) ORDER BY sort_key, seq;
\d product_item_config
select * from product_item_config
;
select * from product_item_config
;
select * from product;
select name, created_at, updated_at from product;
select * from product;
select name, created_at, updated_at from product;
select * from profile_item_config;
select * from product_item_config;
select * from profile_item_type ;
select * from product_item_config ;
\d name
\d reference
\d name
\d instance
\d reference
select * from product_item_config;
select * from profile_item_type;
exut
;
select * from instance where id=51793107;
select name from instance_type where unsourced;
select name from instance_type where unsourced and not deprecated;
select name from instance_type where unsourced and not deprecated order by namne;
select name from instance_type where unsourced and not deprecated order by name;
\d comment
select count(*) from comment;
select max(id) from comment;
select * from comment where id = (select max(id) from comment);
select * from name_rank;
select name from name_rank order by sort_order;
\d tree
\q
\d tree
\d tree
\d tree
SELECT table_catalog, table_schema, table_name, column_name, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean';
\d information_schema.columns
SELECT table_catalog, table_schema, table_name, column_name, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v';
SELECT table_catalog, table_schema, table_name, column_name, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_schema in ('loader', 'public');
SELECT table_catalog, table_schema, table_name, column_name, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_name not like '%_vw' and table_schema in ('loader', 'public');
\d information_schema.columns
SELECT table_catalog, table_schema, table_name, column_name, is_nullable, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_name not like '%_vw' and table_schema in ('loader', 'public');
SELECT table_catalog, table_schema, table_name, column_name, is_nullable, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_name not like '%_vw' and table_name != 'nsl_simple_name_export' and table_schema in ('loader', 'public');
SELECT table_catalog, table_schema, table_name, column_name, is_nullable, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_name not like '%_vw' and table_name not like '%_tmp' and table_name != 'nsl_simple_name_export' and table_schema in ('loader', 'public');
SELECT table_catalog, table_schema, table_name, column_name, is_nullable, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and table_name not like '%_v' and table_name not like '%_vw' and table_name not like '%_tmp' and table_name not like 'pg_%' and table_name != 'nsl_simple_name_export' and table_schema in ('loader', 'public');
\d information_schema.columns
\d information_schema.views
SELECT table_catalog, table_schema, table_name, column_name, is_nullable, ordinal_position  
FROM information_schema.columns  
WHERE table_schema <> 'pg_catalog' AND data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = table_name and v.table_schema = table_schema) and table_name not like '%_tmp' and table_name not like 'pg_%' and table_name != 'nsl_simple_name_export' and table_schema in ('loader', 'public');
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public');
\d current_tve
\d+ current_tve
select * from current_tve;
\d+ current_tve
select * from current_tve;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public');
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and c.column_name like 'is_%';
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and c.column_name like 'is_%' order by 1,2,3,4;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and (c.column_name like 'is_%' or is_nullable) order by 1,2,3,4;
\d information_schema.columns
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and (c.column_name like 'is_%' or is_nullable = 'YES') order by 1,2,3,4;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and (c.column_name like 'is_%' or is_nullable) order by 1,2,3,4;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and c.column_name like 'is_%';
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public');
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') order by 1,2,3;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable
;;;
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable 
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') order by 1,2,3;
\! pwd
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable 
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') order by 1,2,3;
\w a-boolean-columns.sql
SELECT c.table_catalog, c.table_schema, c.table_name, c.column_name, c.is_nullable, c.ordinal_position  
FROM information_schema.columns c
WHERE c.table_schema <> 'pg_catalog' AND c.data_type = 'boolean' and not exists (select null from information_schema.views v where v.table_name = c.table_name and v.table_schema = c.table_schema) and c.table_name not like '%_tmp' and c.table_name not like 'pg_%' and c.table_name != 'nsl_simple_name_export' and c.table_schema in ('loader', 'public') and c.column_name like 'is_%';
\w b-booleans-with-is-prefix.sql
\d tree
\d tree
alter table tree alter column is_read_only set not null;
\w a-set-tree-read-only-not-null.sql
\d tree
alter table tree alter column is_read_only set not null;
select id from reference order by id desc limit 10;
select * from reference where id = 60081026
;
select * from reference where parent_id = 60081026
;
\d tree
select * from tree;
\d tree
alter table tree set not null;
alter table tree alter is_read_only set not null;
alter table tree alter is_schema set not null;
select * from shard_config where name = 'classification tree key';
select * from tree;
begin;
update tree set is_read_only = true where name = 'APC';
commit;
\i grants-to-nslapp.sql 
\q
\d event_record
select * from event_record;
grant select, insert, update, delete on event_record to nslapp;
select  * from tree;
select * from tree;
update tree set is_read_only = false where is_read_only;
\d tree_version
select * from tree_version;
select * from tree_version where not published;
select * from tree_version where draft_name = 'Blah' and not published;
\d tree_version_element
select count(*) from tree_version_element where tree_version_id = (select id from tree_version where draft_name = 'Blah' and not published);
select * from tree_version where not published;
select count(*) from tree_version_element where tree_version_id = (select id from tree_version where draft_name = 'Australian Plant Census List 103, p.p.' and not published);
deletexxx from tree_version_element where tree_version_id = (select id from tree_version where draft_name = 'Blah' and not published);
begin;
delete from tree_version_element where tree_version_id = (select id from tree_version where draft_name = 'Blah' and not published);
delete from tree_version where draft_name = 'Blah' and not published;
commit;
\d tree
select * from tree;
update tree set is_read_only = true where name = upper('apc');
select * from tree;
select * from tree where id = 51788546;
select * from tree_version where id = 51788546;
 SELECT "tree_version".* FROM "tree_version" WHERE "tree_version"."published" = false  AND "tree_version"."id" = 51788546 limit 1;
select * from tree;
select id from tree where name = 'FOA';
select * from tree_version where tree_id = (select id from tree where name = 'FOA');
delete from tree_version_element where tree_version_id in (51793114,51793115,51793116);
select * from  tree_version where id in (51793114,51793115,51793116);
\d tree_version_element
select count(*) from tree_version_element where tree_version_id in (51793114,51793115,51793116);
select * from tree_version where tree_id = (select id from tree where name = 'FOA');
delete from tree_version_element where tree_version_id in (51793114,51793115,51793116);
delete from tree_version where id in (51793114,51793115,51793116);
select * from tree_version where tree_id = (select id from tree where name = 'FOA');
delete from tree_version where id = 51793113;
select count(*) from tree_version_element;
select tree_version_id, count(*) from tree_version_element group by tree_version_id;
select tv.draft_name, tve.tree_version_id, count(*) from tree_version tv join tree_version_element tve on tv.id = tve.tree_version_id group by tve.tree_version_id;
select tv.draft_name, tve.tree_version_id, count(*) from tree_version tv join tree_version_element tve on tv.id = tve.tree_version_id group by tv.draft_name, tve.tree_version_id;
select tree.name, tv.draft_name, tve.tree_version_id, count(*) from tree join tree_version tv on tree.id = tv.tree_id  join tree_version_element tve on tv.id = tve.tree_version_id group by tv.draft_name, tve.tree_version_id;
select tree.name, tv.draft_name, tve.tree_version_id, count(*) from tree join tree_version tv on tree.id = tv.tree_id  join tree_version_element tve on tv.id = tve.tree_version_id group by tree.name, tv.draft_name, tve.tree_version_id;
\w tree-drafts.sql
select tree.name, tv.draft_name, tve.tree_version_id, count(*) from tree join tree_version tv on tree.id = tv.tree_id  join tree_version_element tve on tv.id = tve.tree_version_id where tree.name = 'FOA' group by tree.name, tv.draft_name, tve.tree_version_id;
\dt 
\dt archive.*
select * from loader_batch_raw_names_20_mar_2023 where id = 2530;
select * from archive.loader_batch_raw_names_20_mar_2023 where id = 2530;
select * from archive.loader_batch_raw_names_20_mar_2023 where id = 2535;
select synonym_type, count(*) from archive.loader_batch_raw_names_20_mar_2023 group by synonymy_type;
select synonym_type, count(*) from archive.loader_batch_raw_names_20_mar_2023 group by synonym_type;
select record_type, synonym_type, count(*) from archive.loader_batch_raw_names_20_mar_2023 group by record_type, synonym_type;
\d loader_name_match
\d instance_type
select * from  instance_type where name like '%auto%';
select name from  instance_type where name like '%auto%';
\d instance_type
\d loader_name_match
exi
exit
exit
exit
\q
select * from tree;
select count(*) from tree_version;
select count(*) from tree_version where not published;
select name, draft_name from tree_join_v where not published;
select name, draft_name, count(*) from tree_join_v where not published group by name, draft_name;
select * from tree;
select * from tree where name = 'FOA';
select count(*) from tree_version where tree_id in (select id from tree where name = 'FOA');
select * from tree_version where tree_id in (select id from tree where name = 'FOA');
select id from tree_version where tree_id in (select id from tree where name = 'FOA');
select count(*) from tree_version_element where tree_version_id in (select id from tree_version where tree_id in (select id from tree where name = 'FOA'));
select count(*) from tree_version_element where tree_version_id in (select id from tree_version where tree_id in (select id from tree where name = 'APC'));
\! ls
\w c count-tve.sql
\w count-tve.sql
select * from tree;
update tree set is_read_only = true where name = 'FOA';
select * from tree;
update tree set is_read_only = false where name = 'FOA';
update tree set is_read_only = false where name = 'APC';
update tree set is_read_only = true where name = 'APC';
update tree set is_read_only = false where name = 'APC';
select * from tree;
update tree set is_read_only = true where name = 'APC';
\d tree
update tree set is_read_only = false where name = 'APC';
update tree set is_read_only = true where name = 'APC';
update tree set is_read_only = false where name = 'APC';
\d product
\d product_role_type
select * from product_role_type;
\d product_role_type
select * from product_role_type;
select name,description from product_role_type;
\d role_type
\d product_role_type
\d product
\d author
\d author
:q
exit
\q
select * from users;
select * from user_product_role
;
select * from user_product_role_v
;
\d user_product_role
insert into user_product_role userid, product_id, product_role_type_id select (select id from users where user_name = 'ecfoa'), (select id from product where name = 'FOA'), (select id from product_role_type where name = 'xxx');
insert into user_product_role (userid, product_id, product_role_type_id) select (select id from users where user_name = 'ecfoa'), (select id from product where name = 'FOA'), (select id from product_role_type where name = 'xxx');
insert into user_product_role (user_id, product_id, product_role_type_id) select (select id from users where user_name = 'ecfoa'), (select id from product where name = 'FOA'), (select id from product_role_type where name = 'xxx');
select * from product_role_type;
insert into user_product_role (user_id, product_id, product_role_type_id) select (select id from users where user_name = 'ecfoa'), (select id from product where name = 'FOA'), (select id from product_role_type where name = 'draft-editor');
select * from user_product_role_v
;
select user_name from user_product_role_v order by 1
; 
insert into user_product_role (user_id, product_id, product_role_type_id) select (select id from users where user_name = 'ecfoa'), (select id from product where name = 'FOA'), (select id from product_role_type where name = 'draft-editor');
select user_id from user_product_role where user_id = 52407732;
select * from users where id = 52407732;
\d user_product_role_v
\d+ user_product_role_v
select count(*) from user_product_role;
select count(*) from user_product_role_v;
select count(*) from users u
     JOIN user_product_context upc ON u.id = upc.user_id
     JOIN product_context pc ON upc.context_id = pc.context_id
     JOIN product p ON pc.product_id = p.id
     JOIN user_product_role upr ON u.id = upr.user_id AND p.id = upr.product_id
     JOIN product_role_type prtype ON upr.product_role_type_id = prtype.id
     LEFT JOIN reference ref ON p.reference_id = ref.id
     LEFT JOIN tree ON p.tree_id = tree.id;
\i m-create-join-view.sql 
drop view user_product_role_v;
\i m-create-join-view.sql 
\d instance_type
\d name_type
\d product_role_type
select count(*) from user_product_role_v;
select * from user_product_role;
select * from user_product_role_v;
select * from user_product_role_v order by name;
select * from user_product_role_v order by user_name;
select * from user_product_role_v where user_name = 'ecfoa' order by user_name;
select * from user_product_role_v where user_name = 'ecfoa' order by 1,2,3;
select * from user_product_role_v where user_name like 'ec%' order by 1,2,3;
select user_name, product, role from user_product_role_v where user_name like 'ec%' order by 1,2,3;
begin;
delete from user_product_role
where user_id = 52407810
  and product_id = 51793596
  and product_role_type_id = 51796128;
select user_name, product, role from user_product_role_v where user_name like 'ec%' order by 1,2,3;
commit;
begin;
delete from user_product_role
where user_id = 52407732
  and  product_id = 51793596
  and product_role_type_id = 51796127;
select user_name, product, role from user_product_role_v where user_name like 'ec%' order by 1,2,3;
commit;
\d batch_review
\d instance
select * from instance_type;
select name from instance_type;
select name,synonym from instance_type;
select name,synonym from instance_type where synonym;
select name,synonym from instance_type where not synonym;
select cites_id, cited_by_id from instance_type;
select cites_id, cited_by_id from instance;
xselect cites_id, cited_by_id from instance_type;
\d batch_reviewer
\d org
\! ls
\d batch_reviewer
\d batch_reviewer
\q
\dt 
\d author
 
\d author 
select max(length(abbrev)) from author;
select max(length(name)) from author;
select abbrev, name from author order by length(abbrev) desc limit 10;
select abbrev, name from author where abbrev is not null order by length(abbrev) desc limit 10;
select length(abbrev), abbrev, name from author where abbrev is not null order by length(abbrev) desc limit 10;
select abbrev from author where abbrev like '%et_al%'
;
select abbrev from author where abbrev like '%&_al%'
;
\d author
\d author
select count(*) from author where full_name is not null;
select count(*) from author ;
select count(*) from author where name = full_name ;
select name, full_name from author where name = full_name ;
select abbrev, name, full_name from author where name = 'Kodela, P.G. & Jobson, R.W.';
select abbrev, name, full_name where full_name is not null order by full_name;
select abbreviation, name, full_name where full_name is not null order by full_name;
select abbrev, name, full_name from author where full_name is not null order by full_name;
select name, full_name from author where full_name is not null order by full_name;
select abbrev, name, full_name from author where name = 'Kodela, P.G. & Jobson, R.W.';
select * from author where name = 'Kodela, P.G. & Jobson, R.W.';
select * from author where source_id is not null;
select * from author where source_id is not null and full_name is not null;
select id, abbrev, name, full_name, source_id, source_system from author where source_id is not null and full_name is not null;
select id, abbrev, name, full_name, source_id, source_system from author where source_id is not null and full_name is not null and id = 7115;
select id, abbrev, name, full_name, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null and id = 7115;
select id, abbrev, name, full_name, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null order by updated_at asc limit 100;
select id, abbrev, name, full_name, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null order by updated_at asc limit 10;
\d author
select id, abbrev, name, full_name, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null order by updated_at asc limit 10;
select id, abbrev, name, full_name, created_at, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null order by updated_at asc limit 10;
select abbrev, name, full_name, created_at, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null order by updated_at asc limit 10;
select abbrev, name, full_name, created_at, updated_at, updated_by, source_id, source_system from author where source_id is not null and full_name is not null and length(full_name) > 0 order by updated_at asc limit 10;
\d author
select count(*) from Author where date_range is not null;
select length(name) from author where id = 51793122;
\d author
select length(name) from author where id = 51793122;
select name from author where id = 51793122;
\d product_role_type
select * from product_role;
select * from product_role_type;
create table role (col1 text);
\d role
select * from role
;
\dt
\d batch_review_role
select * from batch_review_role ;
\d role
drop table role;
\d product_role
select * from product_role;
\dt
\d product_role_type
select * from product_role_type;
select id,name,description from product_role_type;
select id,name,description from product_role_type order by 2;
alter table product_role_type rename to role;
\d role
select * from user_product_role;
select * from user_product_role_v;
\d product
\d profile_product
alter table role rename to product_role_type;
\i a-create-role-table.sql 
\d role
select id, name, description, deprecated,0, created_at, created_by, updated_at, updated_by from product_role_type ;
insert into role (id,name,description, deprecated, lock_version, created_at, created_by, updated_at, updated_by) select id, name, description, deprecated,0, created_at, created_by, updated_at, updated_by from product_role_type ;
\w b-copy-into-role.sql 
\d user_product_role
\i c-rename-user-product-role.sql 
\i d-re-create-user-product-role.sql 
select * from user_product_role;
\d user_product_role_deprecated 
select user_id, product_id, product_role_type_id, 0, created_at, created_by, updated_at, updated_by from user_product_role_deprecated ;
insert into user_product_role (user_id, product_id, role_id, lock_version, created_at, created_by, updated_at, updated_by) select user_id, product_id, product_role_type_id, 0, created_at, created_by, updated_at, updated_by from user_product_role_deprecated ;
\w e-copy-into-user-product-role.sql
\dt
\d profile_item_type
\d product_item_config
\d profile_item
\d profile_item_annotation
\d profile_item_reference
\d profile_object_type
\d profile_text
\d profile_item_reference
select * from role;
select id, name from role;
alter table role rename to roles;
drop table product_role_type;
drop view user_product_role_v;
drop table product_role_type;
alter table product_role_type rename to product_role_type_2;
\i d-re-create-user-product-role.sql 
alter table user_product_role rename to user_product_role_2;
\i d-re-create-user-product-role.sql 
\i e-copy-into-user-product-role.sql 
\dt *role*
drop table product_role_type_2 ;
drop table user_product_role_deprecated;
drop table product_role_type_2 ;
\i g-drop-deprecated-tables.sql 
\dt *role*
drop table user_product_role_2;
\dt *role*
\dt *user*
CREATE VIEW public.user_product_role_v AS
 SELECT users.user_name,
    product.name AS product,
    role.name AS role,
    ref.citation AS reference,
    tree.name AS tree,
    (product.is_name_index)::text AS is_name_index,
    users.id AS user_id,
    product.id AS product_id,
    role.id AS role_id
   FROM (((((public.user_product_role upr
     JOIN public.users ON ((upr.user_id = users.id)))
     JOIN public.product ON ((upr.product_id = product.id)))
     JOIN public.roles ON ((upr.role_id = roles.id)))
     LEFT JOIN public.reference ref ON ((product.reference_id = ref.id)))
     LEFT JOIN public.tree ON ((product.tree_id = tree.id)))
  ORDER BY users.user_name, product.name, roles.name;
CREATE VIEW public.user_product_role_v AS
 SELECT users.user_name,
    product.name AS product,
    roles.name AS role,
    ref.citation AS reference,
    tree.name AS tree,
    (product.is_name_index)::text AS is_name_index,
    users.id AS user_id,
    product.id AS product_id,
    role.id AS role_id
   FROM (((((public.user_product_role upr
     JOIN public.users ON ((upr.user_id = users.id)))
     JOIN public.product ON ((upr.product_id = product.id)))
     JOIN public.roles ON ((upr.role_id = roles.id)))
     LEFT JOIN public.reference ref ON ((product.reference_id = ref.id)))
     LEFT JOIN public.tree ON ((product.tree_id = tree.id)))
  ORDER BY users.user_name, product.name, roles.name;
CREATE VIEW public.user_product_role_v AS
 SELECT users.user_name,
    product.name AS product,
    roles.name AS role,
    ref.citation AS reference,
    tree.name AS tree,
    (product.is_name_index)::text AS is_name_index,
    users.id AS user_id,
    product.id AS product_id,
    roles.id AS role_id
   FROM (((((public.user_product_role upr
     JOIN public.users ON ((upr.user_id = users.id)))
     JOIN public.product ON ((upr.product_id = product.id)))
     JOIN public.roles ON ((upr.role_id = roles.id)))
     LEFT JOIN public.reference ref ON ((product.reference_id = ref.id)))
     LEFT JOIN public.tree ON ((product.tree_id = tree.id)))
  ORDER BY users.user_name, product.name, roles.name;
\d product_context
exity
\q
\d product_context
\d user_product_context
\dt
\d product_role_type
\i a-create-role-table.sql 
\d product_role_type
\i a-create-role-table.sql 
\i b-copy-into-role.sql 
\i c-rename-user-product-role.sql 
\i d-re-create-user-product-role.sql 
\i e-copy-into-user-product-role.sql 
\i f-grants.sql 
\i g-drop-deprecated-tables.sql 
drop table user_product_role_deprecated;
drop view user_product_role_v;
\i g-drop-deprecated-tables.sql 
CREATE VIEW public.user_product_role_v AS
 SELECT users.user_name,
    product.name AS product,
    roles.name AS role,
    ref.citation AS reference,
    tree.name AS tree,
    (product.is_name_index)::text AS is_name_index,
    users.id AS user_id,
    product.id AS product_id,
    roles.id AS role_id
   FROM (((((public.user_product_role upr
     JOIN public.users ON ((upr.user_id = users.id)))
     JOIN public.product ON ((upr.product_id = product.id)))
     JOIN public.roles ON ((upr.role_id = roles.id)))
     LEFT JOIN public.reference ref ON ((product.reference_id = ref.id)))
     LEFT JOIN public.tree ON ((product.tree_id = tree.id)))
  ORDER BY users.user_name, product.name, roles.name;
\w f-drop-re-create-upr-view.sql
\i f-drop-re-create-upr-view.sql 
\i g-table-grants.sql 
\i h-drop-deprecated-tables.sql 
select * from user_product_role_v;
select * from user_product_role_v;
select * from user_product_role;
drop table user_product_role;
select * from product_role_type;
drop table product_role_type;
\i a-create-role-table.sql 
\i d-re-create-user-product-role.sql 
\i f-drop-re-create-upr-view.sql 
\cd ..
\! pwd
\! pwd
\cd ..
\! pwd
\d roles
\dt
\dt
\d user_product_context
select * from context_v;
\d users
select * from users;
\d users
\d useres
\d users
select * from users;
select * from users order by user_name;
select * from users order by created_at;
\d users
select * from user_product_role;
select * from user_product_role_v;
select max(created_at) from name;
cal
;
\i trial.sql 
\set echo queries
\i trial.sql 
\set ECHO queries
\i trial.sql 
\unset ECHO queries
\unset ECHO 
\i trial.sql 
\set ECHO queries
\i trial.sql 
select max(created_at) from name;
select max(created_at) from name;
select max(created_at) from name;
grant select on user_product_role to webapni;
grant select, insert, update, delete on user_product_role to webapni;
grant select, insert, update, delete on roles to webapni;
grant select, insert, update, delete on user_product_role to webapni;
grant select, insert, update, delete on roles to webapni;
-- hello
select user;
select
-- stuff
user;
begin;
insert into user_product_role (user_id, product_id,
values (
           (select id from users where user_name = 'amonro'),
           (select id from product where name = upper('apni')),
           (select id from roles where name = 'name-index-editor')
       );
);
insert into user_product_role (user_id, product_id, role_id)
values (
           (select id from users where user_name = 'amonro'),
           (select id from product where name = upper('apni')),
           (select id from roles where name = 'name-index-editor')
       );
rollback;
begin;
insert into user_product_role (user_id, product_id, role_id)
values (
           (select id from users where user_name = 'amonro'),
           (select id from product where name = upper('apni')),
           (select id from roles where name = 'name-index-editor')
       );
rollback;
begin;
insert into user_product_role (user_id, product_id, role_id)
values (
           (select id from users where user_name = 'ecedit'),
           (select id from product where name = upper('foa')),
           (select id from roles where name = 'draft-editor')
       );
commit;
begin;
insert into user_product_role (user_id, product_id, role_id)
values (
           (select id from users where user_name = 'ecfoa'),
           (select id from product where name = upper('foa')),
           (select id from roles where name = 'draft-profile-editor')
       );
commit;
select * from user_product_role_v ;
select * from user_product_role_v order by user_name;
select user_name, product, role  from user_product_role_v order by user_name;
select user_name, product, role  from user_product_role_v where user_name like 'ec%' order by user_name;
queries
;
\set ECHO queries
\unset ECHO queries
\unset ECHO
\d batch_reviewer
eit
exit
\q
\d batch_reviewer
alter table loader.batch_reviewer alter column org_id drop not null;
\w make-org-id-nullable.sql
\d org
\d org
alter table org drop column not_a_real_org;
\w drop-org-column-not-a-real-org.sql
\i drop-org-column-not-a-real-org.sql 
\d org
select * from org;
begin;
delete from org where name = 'No Organisation - Unaffiliated';
\w drop-org-that-is-not-a-real-org.sql
commit;
select * from org;
\d name_review_vote
\d tree_element
\d tree_version_element
\d user_product_role
select * from roles order by name;
select name from roles order by name;
\i a-create-product-role.sql 
\d product_role
select * from user_product_role_v;
select distinct product_id, role_i* from user_product_role_v;
select distinct product_id, role_id from user_product_role_v;
insert into product_role (product_id, role_id) select distinct product_id, role_id from user_product_role;
\w b-grab-existing-product-roles.sql
drop view user_product_role_v ;
\w c-drop-user-product-role-v.sql
\d user_product_role
rename table user_product_role to user_product_role_old;
alter table user_product_role rename to user_product_role_old;
\w d-rename-user-product-role.sql
\i e-recreate-user-product-role.sql 
\d user_product_role;
select * from user_product_role;
select pr.id, pr.product_id, pr.role_id from product_role
where (pr.product_id, pr.role_id) in (select product_id, role_id from user_product_role_old);
select pr.id, pr.product_id, pr.role_id from product_role pr
 where (pr.product_id, pr.role_id) in (select product_id, role_id from user_product_role_old);
select users.id, pr.id, pr.product_id, pr.role_id from product_role pr
 join users  where (users.id, pr.product_id, pr.role_id) in (select user_id, product_id, role_id from user_product_role_old);
select users.id, pr.id, pr.product_id, pr.role_id from product_role pr
 join users on 1=1  where (users.id, pr.product_id, pr.role_id) in (select user_id, product_id, role_id from user_product_role_old);
select users.id, pr.id from product_role pr
 join users on 1=1  where (users.id, pr.product_id, pr.role_id) in (select user_id, product_id, role_id from user_product_role_old);
\w f-list-upr-data.sql
insert into user_product_role (user_id, product_role_id) select users.id, pr.id from product_role pr
 join users on 1=1  where (users.id, pr.product_id, pr.role_id) in (select user_id, product_id, role_id from user_product_role_old);
\w g-generate-copy-of-upr-data.sql
select * from user_product_role;
\i h-create-join-view.sql 
select * from user_product_role_v;
\i i-create-product-role-join-view.sql 
select * from product_role_v;
\w j-select-from-product-role-v;
\d user_product_role_old 
drop table user_product_role_old ;
\w k-drop-user-product-role-old.sql
\d product
\d roles
\d users
\d product_role
select * from product_role;
select * from role where id = 438865554;
select * from roles where id = 438865554;
select * from user_product_role_v;
\d product_role
select * from role where id = 51793123;
select * from roles where id = 51793123;
select * from product_role  where id = 51793128;
SELECT "product_role".* FROM "product_role" ORDER BY "product_role"."id" ASC
;
SELECT "product_role".* FROM "product_role" WHERE "product_role"."id" = 51793123;
\d product_role
\dt
\d user_product_role
\d product_role
select * from product_role_v ;
select * from user_product_role_v ;
\d product_role
\?
\dn
\dt apc.*
\dt apni.*
\dt mapper.*
\dt apc.*
\dt apni.*
\dt apc.*
\dv apc.*
\dv apni.*
\dv apc.*
\dt
\d user_product_role
\dt
\d user_product_role
\dt
\dt
\d user_product_role
\d users
\d roles
select * from users;
select * from roles;
select * from user_product_Role;
eixt
exit
\q
\i a-create-product-role.sql 
\i b-grab-existing-product-roles.sql 
\i c-drop-user-product-role-v.sql 
\i d-rename-user-product-role.sql 
\i e-recreate-user-product-role.sql 
\i f-list-upr-data.sql 
\i g-generate-copy-of-upr-data.sql 
\i h-create-user-product-role-join-view.sql 
\i i-create-product-role-join-view.sql 
\i j-select-from-product-role-v 
\i k-drop-user-product-role-old.sql 
grant select, insert, update, delete on product_role to webapni;
\w k-grant-on-product-role-to-webapni.sql
grant select, insert, update, delete on user_product_role to webapni;
\w l-grant-on-user-product-role-to-webapni.sql
\i a-create-product-role.sql 
\i b-grab-existing-product-roles.sql 
\i c-drop-user-product-role-v.sql 
\i d-rename-user-product-role.sql 
\i e-recreate-user-product-role.sql 
\i f-list-upr-data.sql 
\i g-generate-copy-of-upr-data.sql 
\i h-create-user-product-role-join-view.sql 
\i j-select-from-product-role-v 
\i k-drop-user-product-role-old.sql 
\i k-grant-on-product-role-to-webapni.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
insert into user_product_role (user_id, product_role_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product_role where product_id = (select id from product where name = upper('foa'))
                                 and role_id = (select id from roles where name = 'draft-editor')
);
);
insert into user_product_role (user_id, product_role_id)
values (
  (select id from users where user_name = 'gdfoa'),
  (select id from product_role
    where product_id = (select id from product where name = upper('foa'))
      and role_id = (select id from roles where name = 'draft-editor')
  )
);
 SELECT 'Hello ' || :'name';
\prompt 'Tell me your name: ' name
 SELECT 'Hello ' || :'name';
\i a-create-function.sql 
\d roles
\d product
\i a-create-function.sql 
select * from users;
select * from roles;
select name from users;
select user_name from users;
select name from roles;
select name from product;
select * from user_product_Role_v;
select give_user_product_role('gc','apc','tree-publisher');
select * from product_role_v;
select give_user_product_role('gbentham','foa','tree-publisher');
drop function give_user_product_role;
\d tree
select * from tree;
select id, name, is_read_only from tree;
update tree set is_read_only where name = upper('apc');
update tree set is_read_only = true where name = upper('apc');
select id, name, is_read_only from tree;
\dt
\i a-create-role-table.sql 
\i b-copy-into-role.sql 
\i c-rename-user-product-role.sql 
\i d-re-create-user-product-role.sql 
\i e-copy-into-user-product-role.sql 
\i f-drop-re-create-upr-view.sql 
grant select on user_product_role_v to webmoss;
\i g-table-grants.sql 
\i h-drop-deprecated-tables.sql 
\dt *
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webuser.sql 
grant select, insert, update, delete on user_product_role to webmoss;
grant select, insert, update, delete on product_role to webmoss;
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
grant select, insert, update, delete on user_product_role to webmoss;
grant select, insert, update, delete on product_role to webmoss;
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
grant select, insert, update, delete on user_product_role to weblichen;
grant select, insert, update, delete on product_role to weblichen;
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\i zzz-script.sql 
\i g-table-grants.sql 
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\i zzz-script.sql 
\i g-table-grants.sql 
\i g-table-grants.sql 
\i g-table-grants.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\d product_role
\i zzz-script.sql 
\i l-grant-on-user-product-role-to-webapni.sql 
\i m-grant-on-product-role-to-webapni.sql 
\d tree
update tree set is_read_only false where name = 'APC';
update tree set is_read_only = false where name = 'APC';
select * from user_product_role;
select product.name, role.name from product, name;
select product.name, role.name from product, role;
select product.name, role.name from product join role;
select product.name, role.name from product join rolex;
select product.name, role.name from product join roles;
select product.name, role.name from product join roles on 1=1;
select product.name, roles.name from product join roles on 1=1;
select product.name, roles.name from product join roles on 1=1;
\w cartesian-product.sql
select product.name, roles.name from product join roles on 1=1 order by 1,2;
\w cartesian-product.sql
\i cartesian-product.sql 
select * from product_role_v;
select * from product_role_v order by 2,3;
\w view.sql
delete from product_role where id = 51793130;
select user_name from user_product_role_v;
select user_name from user_product_role_v where role = 'x';
select user_name from user_product_role_v where role = 'draft-profile-editor';
select * from user_product_role_v;
select user_name from user_product_role_v where product = upper('APNI');
select user_name from user_product_role_v where product||role = upper('apni')||'draft-editor';
delete from product_role where id = 51793130;
select * from product_role_v order by 2,3;
select * from product_role_v where product = 'FOA';
select product.name, roles.name from product join roles on 1=1 where product.name = upper('foa')  order by 1,2;
      )
;

C
;

C;

CREATE OR REPLACE FUNCTION create_product_role(p_product_name text, p_role_name text) RETURNS VOID AS
$$
BEGIN
    insert into product_role (product_id, role_id)
    values (
      (select id from product where name = p_product_name),
      (select id from roles where name = p_role_name)
    );

END
$$
  LANGUAGE 'plpgsql';
select create_product_role('foa','draft-editor');
select create_product_role('foa','draft-editor');
select create_product_role('foa','draft-profile-editor');
select create_product_role('foa','profile-editor');
select create_product_role('foa','tree-publisher');
select create_product_role('apc','tree-publisher');
select create_product_role('apni','name-index-editor');
select * from product_role_v;
select create_product_role('apc','tree-publisher');
\d product_role
select * from roles;
select name from roles;
select create_product_role('apc','tree-publisher');
;

CREATE OR REPLACE FUNCTION create_product_role(p_product_name text, p_role_name text) RETURNS VOID AS
$$
BEGIN
    insert into product_role (product_id, role_id)
    values (
      (select id from product where name = upper(p_product_name)),
      (select id from roles where name = p_role_name)
    );

END
$$
  LANGUAGE 'plpgsql';
select create_product_role('apc','tree-publisher');
select * from product_role_v;
select create_product_role('apc','tree-publisher');
select create_product_role('foa','draft-editor');
select create_product_role('foa','draft-profile-editor');
select create_product_role('foa','profile-editor');
select create_product_role('foa','tree-publisher');
select create_product_role('apc','tree-publisher');
select create_product_role('apni','name-index-editor');
select * from product_role_v;
select * from product_role_v order by product, role;
select product, role from product_role_v order by product, role;
select * from product_role_v order by product, role;
delete from product_role where id = 51793148;
select * from roles;
select name, description from roles;
select product, role from product_role_v;
\i rename-user-name-to-user-user-name.sql 
\q
\i rename-user-name-to-user-user-name.sql 
\q
\d users
\d users
\q
\d users
\q
\d users
\d users
\i a-create-table-users.sql 
grant select, insert, update, delete on users to webfungi;
\d users
\i a-create-table-users.sql 
grant select, insert, update, delete on users to weblichen;
\d users
\d users
\i a-create-table-users.sql 
grant select, insert, update, delete on users to webalgae;
\d users
\i a-create-table-users.sql 
grant select, insert, update, delete on users to webmoss;
\d users
\q
\dt
\dt
\d user_product_role
select * from product_Role;
select * from user_product_Role;
select * from users;
\i a-create-product-role.sql 
\echo Start of apni...
\i trial.sql 
\set ECHO queries
\i trial.sql 
\unset ECHO queries
\unset ECHO 
\i trial.sql 
\set ECHO queries
\d product
\d roles
begin;
insert into roles (name, description) values ('draft-editor', 'Can edit draft taxonomic concepts');
insert into roles (name, description) values ('draft-profile-editor', 'Can edit draft profile content of a product');
insert into roles (name, description) values ('profile-editor', 'Can edit a published profile content of a product');
insert into roles (name, description) values ('tree-publisher', 'Can manage the publication of a taxonomy as a new version of a tree of a product');
insert into roles (name, description) values ('name-index-editor', 'Can manage ANY taxonomic concepts in the name index in a dataset');
select * from roles;
select id, name, description from roles order by 2;
select user, product, role from user_product_role_v;
commit;
delete from user_product_role where user_id = (select id from users where user_name = 'nsl');
select id from users where user_name = 'nsl';
select user_name from users order by 1;
select user_name, product, role from user_product_role_v;
delete from user_product_role where user_id = (select id from users where user_name in ('amonro', 'pkodela');
);
delete from user_product_role where user_id = (select id from users where user_name in ('amonro', 'pkodela')
);
delete from user_product_role where user_id in (select id from users where user_name in ('amonro', 'pkodela')
);
select user, product, role from user_product_role_v;
select * from roles;
select id, name, description from roles;
delete from roles where name in ('publisher','drafter','treebuilder','editor');
\d user_product_role
\dt
select * from batch_review_role ;
\d users
\d user_product_role
\d roles
\d product
\d product_context
\i a-create-roles-table.sql 
\i b-create-user-product-role.sql 
\i d-grants.sql 
\i c-create-product-role.sql 
\i d-grants.sql 
\d user_product_role
\d user_product_role
drop table user_product_role;
\i c-create-user-product-role.sql 
\i d-grants.sql 
\i a-create-roles-table.sql 
\i b-create-product-role.sql 
\i c-create-user-product-role.sql 
\i d-grants.sql 
\i a-create-roles-table.sql 
\i b-create-product-role.sql 
\i c-create-user-product-role.sql 
\i d-grants.sql 
\i a-create-roles-table.sql 
\i b-create-product-role.sql 
\i c-create-user-product-role.sql 
\i d-grants.sql 
\i a-create-roles-table.sql 
\i b-create-product-role.sql 
\i c-create-user-product-role.sql 
\i d-grants.sql 
\i rename-user-name-to-user-user-name.sql 
\d users
select table_name from information_schema.columns where column_name = 'description_html';
\d  information_schema.columns
\d  information_schema.tables
select table_type, count(*) from information_schema.tables group by table_type;
select table_name from information_schema.columns col join information_schema.tables tab on col.table_catalog = col.table_catalog; 
select tab.table_name from information_schema.columns col join information_schema.tables tab on col.table_catalog = col.table_catalog; 
\d  information_schema.tables
\d  information_schema.columns
select tab.table_schema, tab.table_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name; 
select tab.table_schema, tab.table_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name and col.column_name = 'description_html'; 
select tab.table_schema, tab.table_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name and col.column_name = 'description_html' order by 1,2; 
select tab.table_schema, tab.table_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where col.column_name = 'description_html' order by 1,2; 
select tab.table_schema, tab.table_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and col.column_name = 'description_html' order by 1,2; 
select tab.table_schema, tab.table_name, tab.table_type from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and col.column_name = 'description_html' order by 1,2; 
select tab.table_schema, tab.table_name, tab.table_type from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.column_name = 'description_html' order by 1,2; 
select tab.table_schema, tab.table_name, tab.table_type from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.column_name = 'description' order by 1,2; 
\w a-tab-cols-description.sql
select tab.table_schema, tab.table_name, tab.table_type from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.column_name = 'description_html' order by 1,2; 
\w b-tab-cols-description.sql
select count(*) from instance_note_key where description_html is not null;
select * from instance_note_key where description_html is not null;
\d product
select tab.table_schema, tab.table_name, col.column_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.column_type = 'boolean' order by 1,2; 
\d information_schema.columns
select tab.table_schema, tab.table_name, col.column_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.data_type = 'boolean' order by 1,2; 
select tab.table_schema, tab.table_name, col.column_name from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.data_type = 'boolean' and col.column_name like 'is_%' order by 1,2; 
\d roles
select tab.table_schema, tab.table_name, tab.table_type from information_schema.tables tab join information_schema.columns col on tab.table_schema = col.table_schema and tab.table_name = col.table_name where tab.table_schema = 'public' and tab.table_type = 'BASE TABLE' and col.column_name = 'description' order by 1,2; 
\d resource_type
\d site
\d uses
\s users
\d users
alter table users add internal_note text;
\w a-add-internal-note.sql
grant select on user_product_role_v to webapni;
\d user_product_role_v
\d product_role
alter table product_role add description text;
\w a-alter-product-role-add-description.sql
\d product_role
\d author
\d author
ALTER TABLE author
ALTER COLUMN abbrev TYPE TEXT;
DROP VIEW IF EXISTS author_v CASCADE;
DROP VIEW IF EXISTS taxon_name_usage_v CASCADE;
DROP VIEW IF EXISTS taxon_v CASCADE;
ALTER TABLE author
ALTER COLUMN abbrev TYPE TEXT;
drop view name_mv
;
ALTER TABLE author
ALTER COLUMN abbrev TYPE TEXT;
drop materialized view name_mv
;
drop view tnu_index_v;
SELECT 'DROP MATERIALIZED VIEW ' || dependent_object || ' CASCADE;' FROM column_view_dependencies_v
WHERE object_kind = 'm' AND table_name = 'author' AND column_name = 'abbrev';
CREATE VIEW public.column_view_dependencies_v AS
 SELECT tbl.relname AS table_name,
    att.attname AS column_name,
    obj.relname AS dependent_object,
    nsp.nspname AS object_schema,
    obj.relkind AS object_kind
   FROM ((((((pg_depend d
     LEFT JOIN pg_rewrite rw ON ((d.objid = rw.oid)))
     LEFT JOIN pg_proc f ON ((d.objid = f.oid)))
     LEFT JOIN pg_class obj ON ((COALESCE(rw.ev_class, f.oid) = obj.oid)))
     LEFT JOIN pg_namespace nsp ON ((COALESCE(obj.relnamespace, f.pronamespace) = nsp.oid)))
     JOIN pg_attribute att ON (((d.refobjid = att.attrelid) AND (d.refobjsubid = att.attnum))))
     JOIN pg_class tbl ON ((att.attrelid = tbl.oid)))
  WHERE ((tbl.relkind = 'r'::"char") AND ((obj.relkind = ANY (ARRAY['v'::"char", 'm'::"char"])) OR (f.oid IS NOT NULL)))
  ORDER BY tbl.relname, att.attname, obj.relname;
SELECT 'DROP MATERIALIZED VIEW ' || dependent_object || ' CASCADE;' FROM column_view_dependencies_v
WHERE object_kind = 'm' AND table_name = 'author' AND column_name = 'abbrev';
 DROP MATERIALIZED VIEW name_mv CASCADE;
 DROP MATERIALIZED VIEW taxon_mv CASCADE;
ALTER TABLE author
ALTER COLUMN abbrev TYPE TEXT;
ALTER TABLE author
ADD CONSTRAINT abbrev_length_check
CHECK (char_length(abbrev) <= 150);
\d author
select * from users;
select * from roles;
select * from product_role;
select name from roles order by 1;
select * from product_role;
CREATE OR REPLACE FUNCTION create_product_role(p_product_name text, p_role_name text) RETURNS VOID AS
$$
BEGIN
    insert into product_role (product_id, role_id)
    values (
      (select id from product where name = upper(p_product_name)),
      (select id from roles where name = p_role_name)
    );

END
$$
  LANGUAGE 'plpgsql';
select create_product_role('foa','draft-editor');
select create_product_role('foa','draft-profile-editor');
select create_product_role('foa','profile-editor');
select create_product_role('foa','tree-publisher');
select create_product_role('apc','tree-publisher');
select * from product_role;
drop function create_product_role;
CREATE OR REPLACE FUNCTION give_user_product_role(p_user_name text, p_product_name text, p_role_name text) RETURNS VOID AS
$$
BEGIN
    insert into user_product_role (user_id, product_role_id)
    values (
      (select id from users where user_name = p_user_name),
      (select id from product_role
        where product_id = (select id from product where name = upper(p_product_name))
          and role_id = (select id from roles where name = p_role_name)
      )
    );

END
$$
  LANGUAGE 'plpgsql';
select give_user_product_role('gdfoa','foa','draft-editor');
select give_user_product_role('gdfoa','foa','draft-profile-editor');
select give_user_product_role('gdecio','apni','name-index-editor');
select give_user_product_role('gdecio','foa','profile-editor');
select give_user_product_role('gdecio','foa','tree-publisher');
select give_user_product_role('gdedit','foa','tree-publisher');
select give_user_product_role('amonro','apc','tree-publisher');
select give_user_product_role('amonro','apni','name-index-editor');
select give_user_product_role('gdecio','apni','name-index-editor');
select give_user_product_role('gdecio','apc','tree-publisher');
select give_user_product_role('ecfoa','foa','draft-profile-editor');
select give_user_product_role('ecedit','foa','draft-editor');
select give_user_product_role('gdfoa','foa','draft-editor');
select * from product_role;
select * from product_role_v;
select * from user_product_role_v;
select * from users where user_name = 'ecfoa';
select * from users where user_name = 'ecedit';
insert into users (user_name, given_name, family_name) values ('ecfoa', 'Endymion','FOAUser');
insert into users (user_name, given_name, family_name) values ('ecedit', 'Endymion','EditUser');
select give_user_product_role('ecfoa','foa','draft-profile-editor');
select give_user_product_role('ecedit','foa','draft-editor');
select name from roles;
select name from roles;
delete from roles where name = 'name-index-editor';
delete from roles where name = 'name-index-editor';
\dv
\d taxon_view
\d taxon_view
\dt
\i loader-schema.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-weblichen.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-weblichen.sql 
\dt
\dt
\d batch_reviewer
\?
\set ECHO_HIDDEN on
show search_path;
\dn
\d batch_reviewer;
\d loader.batch_reviewer;
select * from loader.batch_reviewer;
select * from batch_reviewer;
show search_path
;
\d batch_reviewer
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webalgae.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webalgae.sql 
eit
exit
\q
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webfungi.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webfungi.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webmoss.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webmoss.sql 
\i a-org-table-no-grants.sql 
\dt 
\dt
\dt
\dt loader.*
\d org
\i b-org-table-grants-webapni.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webapni.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webalgae.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webalgae.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webfungi.sql 
\i c-loader-schema-no-grants.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webfungi.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webfungi.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-weblichen.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-weblichen.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webmoss.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webmoss.sql 
\d org
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webalgae.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webalgae.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webfungi.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webfungi.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-weblichen.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-weblichen.sql 
\i a-org-table-no-grants.sql 
\i b-org-table-grants-webmoss.sql 
\i c-loader-schema-no-grants.sql 
\i d-loader-schema-grants-webmoss.sql 
select * from org;
select * from org;
\d org
delete from org where not_a_real_org;
ext
\q
\d org
select * from org;
begin;
delete from org where name = 'No Organisation - Unaffiliated';
select * from org;
commit;
alter table loader.batch_reviewer alter column org_id drop not null;
select * from batch_stack_v ;
\d batch_stack_v 
select * from batch_stack_v where batch_name = 'APC 2022 Updates';
select * from batch_stack_v where batch_name = 'APC 2022 Updates' and display_as = 'Batch Reviewer in stack';
\d+ batch_stack_v 
 SELECT subq.display_as,
    subq.id,
    subq.name,
    subq.batch_name,
    subq.batch_id,
    subq.description,
    subq.created_at,
    subq.start,
    subq.order_by
   FROM ( SELECT 'Loader Batch in stack'::text AS display_as,
            loader_batch.id,
            loader_batch.name,
            loader_batch.name AS batch_name,
            loader_batch.id AS batch_id,
            loader_batch.description,
            loader_batch.created_at,
            loader_batch.created_at AS start,
            (loader_batch.name::text || ' A batch '::text) || loader_batch.name::text AS order_by
           FROM loader_batch
        UNION
         SELECT 'Batch Review in stack'::text AS display_as,
            br.id,
            br.name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            br.created_at,
            br.created_at,
            (lb.name::text || (('A batch '::text || lb.name::text) || ' B review '::text)) || br.name::text AS order_by
           FROM batch_review br
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
        UNION
         SELECT 'Review Period in stack'::text AS display_as,
            brp.id,
            ((((brp.name::text || ' ('::text) || to_char(brp.start_date::timestamp with time zone, 'DD-Mon-YYYY'::text)) ||
                CASE brp.end_date IS NULL
                    WHEN true THEN ' - '::text
                    ELSE ' end: '::text
                END) || COALESCE(to_char(brp.end_date::timestamp with time zone, 'DD-Mon-YYYY'::text), ''::text)) || ')'::text AS name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            brp.created_at,
            brp.start_date,
            (lb.name::text || (((('A batch '::text || lb.name::text) || ' B review '::text) || br.name::text) || ' C period '::text)) || brp.start_date AS order_by
           FROM batch_review_period brp
             JOIN batch_review br ON brp.batch_review_id = br.id
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
        UNION
         SELECT 'Batch Reviewer in stack'::text AS display_as,
            brer.id,
            (((((users.given_name::text || ' '::text) || users.family_name::text) || ' for '::text) || org.abbrev::text) || ' as '::text) || brrole.name::text AS name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            brer.created_at,
            brer.created_at,
            (lb.name::text || (((('A batch '::text || lb.name::text) || ' B review '::text) || br.name::text) || ' D reviewer '::text)) || users.user_name::text AS order_by
           FROM batch_reviewer brer
             JOIN batch_review br ON br.id = brer.batch_review_id
             JOIN users ON brer.user_id = users.id
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
             JOIN org ON brer.org_id = org.id
             JOIN batch_review_role brrole ON brer.batch_review_role_id = brrole.id) subq
  ORDER BY subq.order_by;
\w view.sql
\i view.sql 
select * from batch_stack_v where batch_name = 'APC 2022 Updates' and display_as = 'Batch Reviewer in stack';
 SELECT subq.display_as,
    subq.id,
    subq.name,
    subq.batch_name,
    subq.batch_id,
    subq.description,
    subq.created_at,
    subq.start,
    subq.order_by
   FROM ( SELECT 'Loader Batch in stack'::text AS display_as,
            loader_batch.id,
            loader_batch.name,
            loader_batch.name AS batch_name,
            loader_batch.id AS batch_id,
            loader_batch.description,
            loader_batch.created_at,
            loader_batch.created_at AS start,
            (loader_batch.name::text || ' A batch '::text) || loader_batch.name::text AS order_by
           FROM loader_batch
        UNION
         SELECT 'Batch Review in stack'::text AS display_as,
            br.id,
            br.name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            br.created_at,
            br.created_at,
            (lb.name::text || (('A batch '::text || lb.name::text) || ' B review '::text)) || br.name::text AS order_by
           FROM batch_review br
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
        UNION
         SELECT 'Review Period in stack'::text AS display_as,
            brp.id,
            ((((brp.name::text || ' ('::text) || to_char(brp.start_date::timestamp with time zone, 'DD-Mon-YYYY'::text)) ||
                CASE brp.end_date IS NULL
                    WHEN true THEN ' - '::text
                    ELSE ' end: '::text
                END) || COALESCE(to_char(brp.end_date::timestamp with time zone, 'DD-Mon-YYYY'::text), ''::text)) || ')'::text AS name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            brp.created_at,
            brp.start_date,
            (lb.name::text || (((('A batch '::text || lb.name::text) || ' B review '::text) || br.name::text) || ' C period '::text)) || brp.start_date AS order_by
           FROM batch_review_period brp
             JOIN batch_review br ON brp.batch_review_id = br.id
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
        UNION
         SELECT 'Batch Reviewer in stack'::text AS display_as,
            brer.id,
            (((((users.given_name::text || ' '::text) || users.family_name::text) || ' for '::text) || org.abbrev::text) || ' as '::text) || brrole.name::text AS name,
            lb.name AS batch_name,
            lb.id AS batch_id,
            ''::text AS description,
            brer.created_at,
            brer.created_at,
            (lb.name::text || (((('A batch '::text || lb.name::text) || ' B review '::text) || br.name::text) || ' D reviewer '::text)) || users.user_name::text AS order_by
           FROM batch_reviewer brer
             JOIN batch_review br ON br.id = brer.batch_review_id
             JOIN users ON brer.user_id = users.id
             JOIN loader_batch lb ON br.loader_batch_id = lb.id
             JOIN org ON brer.org_id = org.id
             JOIN batch_review_role brrole ON brer.batch_review_role_id = brrole.id) subq
  ORDER BY subq.order_by;
\i view.sql 
\i view.sql 
\i batch_stack_v.sql 
\d batch_stack_v
\i batch_stack_v.sql 
select current_database();
grant select on batch_stack_v to 'web'||current_database();
grant select on batch_stack_v to case current_database() when 'apni' then webapni else other;
case 'a'
  when 'a' then 'aaaa'
else 'bbb'
end;
grant select on batch_stack_v to fred;
create function grant_on_bsv
as
  $$ grant select on batch_stack_v to fred $$ 
  language sql;
create function grant_on_bsv()
as
  $$ grant select on batch_stack_v to fred $$ 
  language sql;
create function grant_on_bsv()
returns void as
  $$ grant select on batch_stack_v to fred $$ 
  language sql;
\w a-function.sql
select grant_on_bsv();
\i a-function.sql
drop function grant_on_bsv();
select grant_on_bsv('webapni');
\i a-function.sql
CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;
select add(4,5);
\i b-function.sql 
\i a-function.sql 
select grant_on_bsv_to_webapni() where current_database() = 'apni';
\i a-function.sql 
select grant_on_bsv_to_webapni() where current_database() = 'apni';
select current_database;
select current_database();
drop function grant_on_bsv_to_web_user if exists;
drop function if exists grant_on_bsv_to_web_user;
\i a-function.sql 
\i batch_stack_v.sql 
\d batch_stack_v 
\i a-function.sql 
\d loader_name
\d loader_name
alter table loader_name add formatted_text_above text;
alter table loader_name add formatted_text_below text;
\w add-formatted-text-cols.sql
select  * from loader_name where formatted_text_above is not null;
\d loader_name
\d loader_name
select id from loader_name where formatted_text_above is not null;
select id, formatted_text_above from loader_name where formatted_text_above is not null;
\x
select id, formatted_text_above from loader_name where formatted_text_above is not null;
update loader_name set formatted_text_above = to_char(;
);
select to_char(33);
select 33::text;
update loader_name set formatted_text_above = id::text||' - 'formatted_text_above where formatted_text_above is not null;
);
update loader_name set formatted_text_above = id::text||' - 'formatted_text_above where formatted_text_above is not null;
update loader_name set formatted_text_above = id::text||' - '||formatted_text_above where formatted_text_above is not null;
update loader_name set formatted_text_below = id::text||' - '||formatted_text_below where formatted_text_below is not null;
select id, remark_to_reviwers from loader_name where remark_to_reviwers is not null;
\d loader_name
select id, remark_to_reviewers from loader_name where remark_to_reviewers is not null;
select id, remark_to_reviewers from loader_name where remark_to_reviewers like '%strong%'
;
select id, remark_to_reviewers from loader_name where remark_to_reviewers like '%LITHO%'
;
select id, higher_rank_comment from loader_name where higher_rank_comment like '%LITHO%'
;
\d loader_name
\i add-formatted-text-cols.sql 
\i add-formatted-text-cols.sql 
\d loader_name
\d loader_name
\d taxon_view
\d+ taxon_view
\d name
\df f_unaccent
\df+ f_unaccent
\?
\df+ f_unaccent
SELECT proname, prosrc
FROM pg_proc
WHERE proname = 'f_unaccent';
SELECT datname, oid FROM pg_database;
SELECT datname, oid FROM pg_database;
SELECT datname, oid FROM pg_database order by datname;
SELECT relname, oid FROM pg_class WHERE 's' = 'y';
\d pg_class
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%'
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51738405' ) ORDER BY sort_key, seq
;
select count(*) from name_review_vote;
select count(*) from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id;
select count(*) from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
and lower(org.abbrev) like '%'
;
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%'
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51738405' );
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ( record_type in ('accepted','excluded')
        and exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like '%'
                          where loader_name.id = name_review_vote.loader_name_id)) AND (loader_batch_id = '51738405' );
\w a-failing-query.sql
select * from loader_name where id = 51743765;
\i b-trial.sql 
\i c-combined-query.sql 
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ((  ( record_type in ('accepted','excluded')
         and (exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like lower('k')
                          where loader_name.id = name_review_vote.loader_name_id)
             )
       )
       OR
       ( record_type in ('heading')
         and exists ( select null
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       where loader_name.family = inner_loader_name.family)
       )
    )) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq
;
\w d-from-rails-log.sql
\i d-from-rails-log.sql
select * 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       where loader_name.family = inner_loader_name.family;
select 
select inner_loader_name.id, inner_loader_name,simple_name, inner_loader_name.record_type 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       where loader_name.family = inner_loader_name.family;
select inner_loader_name.id, inner_loader_name,simple_name, inner_loader_name.record_type 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       ;
select inner_loader_name.id, inner_loader_name.simple_name, inner_loader_name.record_type 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       ;
select inner_loader_name.id, inner_loader_name.record_type, inner_loader_name.family, inner_loader_name.simple_name 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       ;
select inner_loader_name.id, inner_loader_name.record_type, inner_loader_name.family, inner_loader_name.simple_name, inner_loader_name.loader_batch_id 
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('k')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       ;
\w e-diagnostic.sql
\i d-from-rails-log.sql 
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ((lower(simple_name) like 'thunbergia arnhemica%')
        or exists (
        select null
          from loader_name parent
        where parent.id         = loader_name.parent_id
       and lower(parent.simple_name) like 'thunbergia arnhemica%')
        or exists (
        select null
          from loader_name child
        where child.parent_id   = loader_name.id
       and lower(child.simple_name) like 'thunbergia arnhemica%')
        or exists (
        select null
          from loader_name sibling
        where sibling.parent_id = loader_name.parent_id
       and lower(sibling.simple_name) like 'thunbergia arnhemica%')) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq;
\w a-sample-simple-name-query.sql
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND ((  ( record_type in ('accepted','excluded')
         and (exists ( select null
                           from name_review_vote
                                join org
                                on name_review_vote.org_id = org.id
                                and lower(org.abbrev) like lower('%')
                          where loader_name.id = name_review_vote.loader_name_id)
             )
       )
       OR
       ( record_type in ('heading')
         and exists ( select null
                        from name_review_vote
                             join org
                             on name_review_vote.org_id = org.id
                             and lower(org.abbrev) like lower('%')
                             join loader_name inner_loader_name
                             on name_review_vote.loader_name_id = inner_loader_name.id
                       where loader_name.family = inner_loader_name.family
                         and loader_name.loader_batch_id = inner_loader_name.loader_batch_id
                       )
       )
                      )) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq;
\w org-voted-query.sql
\i c-combined-query.sql 
\i d-combo-query.sql 
\i e-combo-query.sql 
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND (id in ( select id from loader_name where
                           (
                             (
                              record_type in ('accepted','excluded')
                              and exists ( select null
                                              from name_review_vote
                                                   join org
                                                   on name_review_vote.org_id = org.id
                                                   and lower(org.abbrev) like lower('%')
                                             where loader_name.id = name_review_vote.loader_name_id)
                             )
                            or
                            (
                             record_type in ('heading')
                             and exists ( select null
                                            from name_review_vote
                                                 join org
                                                 on name_review_vote.org_id = org.id
                                                 and lower(org.abbrev) like lower('%')
                                                 join loader_name inner_loader_name
                                                 on name_review_vote.loader_name_id = inner_loader_name.id
                                           where loader_name.family = inner_loader_name.family
                                             and loader_name.loader_batch_id = inner_loader_name.loader_batch_id
                                        )
                            )
                           )
                         )
                   or
                   parent_id in ( select id from loader_name where
                                   record_type in ('accepted','excluded')
                                   and (exists ( select null
                                                   from name_review_vote
                                                        join org
                                                        on name_review_vote.org_id = org.id
                                                        and lower(org.abbrev) like lower('%')
                                                  where loader_name.id = name_review_vote.loader_name_id)
                                       )
                                )) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq;
\w a-from-dev-log.sql
\i a-from-dev-log.sql
\df profile_instance_constraint 
\df+ profile_instance_constraint 
\df+ profile_instance_constraint 
\df+ profile_instance_constraint 
select count(*) from tree_version_element;
create extension if not exists hstore;
\i grants-to-nslapp.sql 
\! ls -lart
vacuum full verbose analyze;
alter database nsl_dev rename to nsl_dev_retired_08_may_2025;
select * from pg_stat_activity ;
alter database nsl_dev rename to nsl_dev_retired_08_may_2025;
alter database nsl_test rename to nsl_dev;
\! pwd
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND (id in ( select id from loader_name where
                           (
                             (
                              record_type in ('accepted','excluded')
                              and not exists ( select null
                                              from name_review_vote
                                                   join org
                                                   on name_review_vote.org_id = org.id
                                                   and lower(org.abbrev) like lower('perth')
                                             where loader_name.id = name_review_vote.loader_name_id)
                             )
                            or
                            (
                             record_type in ('heading')
                             and not exists ( select null
                                            from name_review_vote
                                                 join org
                                                 on name_review_vote.org_id = org.id
                                                 and lower(org.abbrev) like lower('perth')
                                                 join loader_name inner_loader_name
                                                 on name_review_vote.loader_name_id = inner_loader_name.id
                                           where loader_name.family = inner_loader_name.family
                                             and loader_name.loader_batch_id = inner_loader_name.loader_batch_id
                                        )
                            )
                           )
                         )
                   or
                   parent_id in ( select id from loader_name where
                                   record_type in ('accepted','excluded')
                                   and (not exists ( select null
                                                   from name_review_vote
                                                        join org
                                                        on name_review_vote.org_id = org.id
                                                        and lower(org.abbrev) like lower('perth')
                                                  where loader_name.id = name_review_vote.loader_name_id)
                                       )
                                )) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq;
\w b-from-dev-log-not-voted-perth.sql
\i b-from-dev-log-not-voted-perth.sql
\x
\i b-from-dev-log-not-voted-perth.sql
\i a-from-dev-log.sql 
\i b-from-dev-log-not-voted-perth.sql
\i pwd
\! pwd
\i b-from-dev-log-not-voted-perth.sql 
\! pwd
\i b-from-dev-log-not-voted-perth.sql 
select id, record_type, rank, simple_name, family
from loader_name where id = 51739033;
:w
;
select id, record_type, rank, simple_name, family
from loader_name where id = 51739033;
\w c-acanth.sql
\i c-acanth.sql
\i b-from-dev-log-not-voted-perth.sql 
SELECT "loader_name".* FROM "loader_name" WHERE (1=1) AND (id in ( select id from loader_name loader_name_inner where
                           (
                             (
                              record_type in ('accepted','excluded')
                              and not exists ( select null
                                              from name_review_vote
                                                   join org
                                                   on name_review_vote.org_id = org.id
                                                   and lower(org.abbrev) like lower('perth')
                                             where loader_name_inner.id = name_review_vote.loader_name_id)
                             )
                            or
                            (
                             record_type in ('heading')
                             and exists ( select null
                                            from loader_name loader_name_here
                                                 left outer join name_review_vote
                                                 on loader_name_here.id = name_review_vote.loader_name_id
                                                 left outer join org
                                                 on name_review_vote.org_id = org.id
                                           where loader_name_inner.id != loader_name_here.id
                                             and loader_name_inner.family = loader_name_here.family
                                             and coalesce(lower(org.abbrev),'x') not like lower('perth')
                                        )
                            )
                           )
                   or
                   parent_id in ( select id from loader_name loader_name_parent where
                                   record_type in ('accepted','excluded')
                                   and (not exists ( select null
                                                   from name_review_vote
                                                        join org
                                                        on name_review_vote.org_id = org.id
                                                        and lower(org.abbrev) like lower('perth')
                                                  where loader_name_parent.id = name_review_vote.loader_name_id)
                                       )
                                )
                       )) AND (loader_batch_id = '51739032' ) ORDER BY sort_key, seq LIMIT 1;
\w d-bad.sql
\i d-bad.sql
\i e-part-of-bad.sql 
\i f-part-of-bad.sql 
\i f-smaller-part-of-bad.sql 
\i g-was-d-bad.sql 
\i h-other-bad.sql 
\d name_review_vote
select * from org;
select * from org where lower(name) = lower('k');
select * from org where lower(abbrev) = lower('k');
select lower(f_unaccent('oxy%bract%'))
;
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT $1) subquery_for_count
;
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 8) subquery_for_count
;
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 8) subquery_for_count
;
\w a.sql
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1) subquery_for_count
;
\w b.sql
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken%bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken%bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1) subquery_for_count
;
\w c.sql
 SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('kuken%bot') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('kuken%bot') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1) subquery_for_count
;
\w b-percent-left-in.sql
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1) subquery_for_count;
SELECT COUNT(*) FROM (SELECT 1 AS one FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1) subquery_for_count;
SELECT "reference".* FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT;
SELECT "reference".* FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT "reference".* FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxyl') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('latin', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('latin', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('latin', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('latin', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('latin', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('latin', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
\dFd
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
\q
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 1;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('english', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('english', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('english', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 10;
SELECT id, citation FROM "reference" INNER JOIN (SELECT "reference"."id" AS pg_search_id, (ts_rank((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))), (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')), 0)) AS rank FROM "reference" WHERE ((to_tsvector('simple', f_unaccent(coalesce(("reference"."citation")::text, '')))) @@ (to_tsquery('simple', ''' ' || f_unaccent('oxy') || ' ''' || ':*') && to_tsquery('simple', ''' ' || f_unaccent('bract') || ' ''' || ':*')))) AS pg_search_52367a6622b19f08825e91 ON "reference"."id" = pg_search_52367a6622b19f08825e91.pg_search_id WHERE (1=1) ORDER BY citation LIMIT 10;
select * from org ;
select * from org where abbrev = 'UNE' ;
select * from org where abbrev = 'NE' ;
begin;
select * from org where abbrev = 'NE' ;
update org set can_vote = false  where abbrev = 'NE' ;
select * from org where abbrev = 'NE' ;
commit;
select * from org;
select name, abbrev, can_vote::text from org;
select name, abbrev, can_vote::text from org order by name;
begin;
delete from org where abbrev = 'K';
rollback;
select * from batch_reviewer ;
dv
;
\dv
\d batch_reviewer;
\dv
\d batch_reviewer
\d users
select user_name from users u
join batch_reviewer br
on u.id = br.user_id;
select user_name from users u
join batch_reviewer br
on u.id = br.user_id
select user_name from users u
join batch_reviewer br
on u.id = br.user_id 
select user_name from users u
         join batch_reviewer br
         on u.id = br.user_id
         join org
         on br.org_id = org.id;
\w br.sql
\i br.sql 
\i br.sql
\i br.sql 
\d batch_reviewer
\i br.sql 
begin;
delete from batch_reviewer where id = 51785037;
delete from batch_reviewer where id = 51785045;
delete from batch_reviewer where id = 51795618;
commit
;
\i br.sql 
begin;
delete from org where abbrev = 'K';
commit;
select * from users;
select * from users order by user_name;
\i br.sql 
select name, abbrev, can_vote::text from org order by name;
begin;
update org set can_vote = false where abbrev = 'CANB';
commit;
select name, abbrev, can_vote::text from org order by name;
begin;
update org set can_vote = false where abbrev = 'CNS';
commit;
select name, abbrev, can_vote::text from org order by name;
select abbrev, name, can_vote::text from org order by abbrev;
begin;
delete from org
where abbrev = 'NT';
commit;
select abbrev, name, can_vote::text from org order by abbrev;
begin;
update org
set name = 'Northern Territory Herbarium'
where abbrev = 'DNA'
;
commit;
select abbrev, name, can_vote::text from org order by abbrev;
select * from users;
begin;
delete from users where user_name = 'gbentham';
commit;
begin;
delete from users where user_name = 'jhooker';
rollback;
\i br.sql 
begin;
delete from batch_reviewer where id = 51795700;
delete from batch_reviewer where id = 51795617;
delete from batch_reviewer where id = 51795619;
delete from users where user_name = 'jhooker';
commit;
select * from users;
\s users
